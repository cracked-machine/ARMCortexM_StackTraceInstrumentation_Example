
G474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fb8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004198  08004198  00014198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004210  08004210  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004210  08004210  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004210  08004210  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004214  08004214  00014214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008f8  20000014  0800422c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000090c  0800422c  0002090c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013777  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002854  00000000  00000000  000337bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001188  00000000  00000000  00036010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001060  00000000  00000000  00037198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025e12  00000000  00000000  000381f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc47  00000000  00000000  0005e00a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f9ef6  00000000  00000000  0006bc51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00165b47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004924  00000000  00000000  00165bc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004180 	.word	0x08004180

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08004180 	.word	0x08004180

08000220 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	4a07      	ldr	r2, [pc, #28]	; (800024c <vApplicationGetIdleTaskMemory+0x2c>)
 8000230:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <vApplicationGetIdleTaskMemory+0x30>)
 8000236:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	2280      	movs	r2, #128	; 0x80
 800023c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800023e:	bf00      	nop
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
 800024a:	bf00      	nop
 800024c:	20000030 	.word	0x20000030
 8000250:	20000084 	.word	0x20000084

08000254 <trigger_irq>:
// (gdb) continue
// (gdb) set g_crash_config=1
// (gdb) continue
int g_crash_config = FAULT_EXAMPLE_CONFIG;

void trigger_irq(void) {
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
  volatile uint32_t *nvic_iser = (void *)0xE000E100;
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <trigger_irq+0x38>)
 800025c:	607b      	str	r3, [r7, #4]
  *nvic_iser |= (0x1 << 1);
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	f043 0202 	orr.w	r2, r3, #2
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	601a      	str	r2, [r3, #0]

  // Pend an interrupt
  volatile uint32_t *nvic_ispr = (void *)0xE000E200;
 800026a:	4b09      	ldr	r3, [pc, #36]	; (8000290 <trigger_irq+0x3c>)
 800026c:	603b      	str	r3, [r7, #0]
  *nvic_ispr |= (0x1 << 1);
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f043 0202 	orr.w	r2, r3, #2
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	601a      	str	r2, [r3, #0]

  // flush pipeline to ensure exception takes effect before we
  // return from this routine
  __asm("isb");
 800027a:	f3bf 8f6f 	isb	sy
}
 800027e:	bf00      	nop
 8000280:	370c      	adds	r7, #12
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	e000e100 	.word	0xe000e100
 8000290:	e000e200 	.word	0xe000e200

08000294 <stkerr_from_psp>:

void stkerr_from_psp(void) {
 8000294:	b5b0      	push	{r4, r5, r7, lr}
 8000296:	b086      	sub	sp, #24
 8000298:	af00      	add	r7, sp, #0
 800029a:	466b      	mov	r3, sp
 800029c:	461d      	mov	r5, r3
  extern uint32_t _start_of_ram[];
  uint8_t dummy_variable;
  const size_t distance_to_ram_bottom = (uint32_t)&dummy_variable - (uint32_t)_start_of_ram;
 800029e:	1dfb      	adds	r3, r7, #7
 80002a0:	4a21      	ldr	r2, [pc, #132]	; (8000328 <stkerr_from_psp+0x94>)
 80002a2:	1a9b      	subs	r3, r3, r2
 80002a4:	613b      	str	r3, [r7, #16]
  volatile uint8_t big_buf[distance_to_ram_bottom - 8];
 80002a6:	693b      	ldr	r3, [r7, #16]
 80002a8:	3b09      	subs	r3, #9
 80002aa:	60fb      	str	r3, [r7, #12]
 80002ac:	693b      	ldr	r3, [r7, #16]
 80002ae:	3b08      	subs	r3, #8
 80002b0:	4619      	mov	r1, r3
 80002b2:	f04f 0200 	mov.w	r2, #0
 80002b6:	f04f 0300 	mov.w	r3, #0
 80002ba:	f04f 0400 	mov.w	r4, #0
 80002be:	00d4      	lsls	r4, r2, #3
 80002c0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80002c4:	00cb      	lsls	r3, r1, #3
 80002c6:	693b      	ldr	r3, [r7, #16]
 80002c8:	3b08      	subs	r3, #8
 80002ca:	4619      	mov	r1, r3
 80002cc:	f04f 0200 	mov.w	r2, #0
 80002d0:	f04f 0300 	mov.w	r3, #0
 80002d4:	f04f 0400 	mov.w	r4, #0
 80002d8:	00d4      	lsls	r4, r2, #3
 80002da:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80002de:	00cb      	lsls	r3, r1, #3
 80002e0:	693b      	ldr	r3, [r7, #16]
 80002e2:	3b08      	subs	r3, #8
 80002e4:	3307      	adds	r3, #7
 80002e6:	08db      	lsrs	r3, r3, #3
 80002e8:	00db      	lsls	r3, r3, #3
 80002ea:	ebad 0d03 	sub.w	sp, sp, r3
 80002ee:	466b      	mov	r3, sp
 80002f0:	3300      	adds	r3, #0
 80002f2:	60bb      	str	r3, [r7, #8]
  for (size_t i = 0; i < sizeof(big_buf); i++) {
 80002f4:	2300      	movs	r3, #0
 80002f6:	617b      	str	r3, [r7, #20]
 80002f8:	e009      	b.n	800030e <stkerr_from_psp+0x7a>
    big_buf[i] = i;
 80002fa:	697b      	ldr	r3, [r7, #20]
 80002fc:	b2d9      	uxtb	r1, r3
 80002fe:	68ba      	ldr	r2, [r7, #8]
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	4413      	add	r3, r2
 8000304:	460a      	mov	r2, r1
 8000306:	701a      	strb	r2, [r3, #0]
  for (size_t i = 0; i < sizeof(big_buf); i++) {
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	3301      	adds	r3, #1
 800030c:	617b      	str	r3, [r7, #20]
 800030e:	693b      	ldr	r3, [r7, #16]
 8000310:	3b08      	subs	r3, #8
 8000312:	697a      	ldr	r2, [r7, #20]
 8000314:	429a      	cmp	r2, r3
 8000316:	d3f0      	bcc.n	80002fa <stkerr_from_psp+0x66>
  }

  trigger_irq();
 8000318:	f7ff ff9c 	bl	8000254 <trigger_irq>
 800031c:	46ad      	mov	sp, r5
}
 800031e:	bf00      	nop
 8000320:	3718      	adds	r7, #24
 8000322:	46bd      	mov	sp, r7
 8000324:	bdb0      	pop	{r4, r5, r7, pc}
 8000326:	bf00      	nop
 8000328:	20000000 	.word	0x20000000

0800032c <bad_memory_access_crash>:

int bad_memory_access_crash(void) {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
  volatile uint32_t *bad_access = (volatile uint32_t *)0xdeadbeef;
 8000332:	4b05      	ldr	r3, [pc, #20]	; (8000348 <bad_memory_access_crash+0x1c>)
 8000334:	607b      	str	r3, [r7, #4]
  return *bad_access;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
}
 800033a:	4618      	mov	r0, r3
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	deadbeef 	.word	0xdeadbeef

0800034c <illegal_instruction_execution>:

int illegal_instruction_execution(void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
  int (*bad_instruction)(void) = (void *)0xE0000000;
 8000352:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000356:	607b      	str	r3, [r7, #4]
  return bad_instruction();
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4798      	blx	r3
 800035c:	4603      	mov	r3, r0
}
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
	...

08000368 <unaligned_double_word_read>:

void unaligned_double_word_read(void) {
 8000368:	b490      	push	{r4, r7}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
  extern void *g_unaligned_buffer;
  uint64_t *buf = g_unaligned_buffer;
 800036e:	4b0a      	ldr	r3, [pc, #40]	; (8000398 <unaligned_double_word_read+0x30>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	607b      	str	r3, [r7, #4]
  *buf = 0x1122334455667788;
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	a406      	add	r4, pc, #24	; (adr r4, 8000390 <unaligned_double_word_read+0x28>)
 8000378:	e9d4 3400 	ldrd	r3, r4, [r4]
 800037c:	e9c2 3400 	strd	r3, r4, [r2]
}
 8000380:	bf00      	nop
 8000382:	3708      	adds	r7, #8
 8000384:	46bd      	mov	sp, r7
 8000386:	bc90      	pop	{r4, r7}
 8000388:	4770      	bx	lr
 800038a:	bf00      	nop
 800038c:	f3af 8000 	nop.w
 8000390:	55667788 	.word	0x55667788
 8000394:	11223344 	.word	0x11223344
 8000398:	200003b8 	.word	0x200003b8
 800039c:	00000000 	.word	0x00000000

080003a0 <bad_addr_double_word_write>:

void bad_addr_double_word_write(void) {
 80003a0:	b490      	push	{r4, r7}
 80003a2:	b082      	sub	sp, #8
 80003a4:	af00      	add	r7, sp, #0
  volatile uint64_t *buf = (volatile uint64_t *)0x30000000;
 80003a6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80003aa:	607b      	str	r3, [r7, #4]
  *buf = 0x1122334455667788;
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	a406      	add	r4, pc, #24	; (adr r4, 80003c8 <bad_addr_double_word_write+0x28>)
 80003b0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80003b4:	e9c2 3400 	strd	r3, r4, [r2]
}
 80003b8:	bf00      	nop
 80003ba:	3708      	adds	r7, #8
 80003bc:	46bd      	mov	sp, r7
 80003be:	bc90      	pop	{r4, r7}
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	f3af 8000 	nop.w
 80003c8:	55667788 	.word	0x55667788
 80003cc:	11223344 	.word	0x11223344

080003d0 <access_disabled_coprocessor>:

void access_disabled_coprocessor(void) {
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  // FreeRTOS will automatically enable the FPU co-processor.
  // Let's disable it for the purposes of this example
  __asm volatile(
 80003d4:	4806      	ldr	r0, [pc, #24]	; (80003f0 <access_disabled_coprocessor+0x20>)
 80003d6:	f04f 0100 	mov.w	r1, #0
 80003da:	6001      	str	r1, [r0, #0]
 80003dc:	f3bf 8f4f 	dsb	sy
 80003e0:	ee10 0a10 	vmov	r0, s0
      "mov r1, #0 \n"
      "str r1, [r0]	\n"
      "dsb \n"
      "vmov r0, s0 \n"
      );
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	0000      	.short	0x0000
 80003f0:	e000ed88 	.word	0xe000ed88

080003f4 <read_from_bad_address>:

uint32_t read_from_bad_address(void) {
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  return *(volatile uint32_t *)0xbadcafe;
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <read_from_bad_address+0x14>)
 80003fa:	681b      	ldr	r3, [r3, #0]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	0badcafe 	.word	0x0badcafe

0800040c <trigger_crash>:
      "ldr r0, =0xFFFFFFE0 \n"
      "bx r0 \n"
                 );
}

void trigger_crash(int crash_id) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
  switch (crash_id) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	2b07      	cmp	r3, #7
 8000418:	d82a      	bhi.n	8000470 <trigger_crash+0x64>
 800041a:	a201      	add	r2, pc, #4	; (adr r2, 8000420 <trigger_crash+0x14>)
 800041c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000420:	08000441 	.word	0x08000441
 8000424:	08000447 	.word	0x08000447
 8000428:	0800044d 	.word	0x0800044d
 800042c:	08000453 	.word	0x08000453
 8000430:	08000459 	.word	0x08000459
 8000434:	0800045f 	.word	0x0800045f
 8000438:	08000465 	.word	0x08000465
 800043c:	0800046b 	.word	0x0800046b
    case 0:
      illegal_instruction_execution();
 8000440:	f7ff ff84 	bl	800034c <illegal_instruction_execution>
      break;
 8000444:	e015      	b.n	8000472 <trigger_crash+0x66>
    case 1:
      read_from_bad_address();
 8000446:	f7ff ffd5 	bl	80003f4 <read_from_bad_address>
      break;
 800044a:	e012      	b.n	8000472 <trigger_crash+0x66>
    case 2:
      access_disabled_coprocessor();
 800044c:	f7ff ffc0 	bl	80003d0 <access_disabled_coprocessor>
      break;
 8000450:	e00f      	b.n	8000472 <trigger_crash+0x66>
    case 3:
      bad_addr_double_word_write();
 8000452:	f7ff ffa5 	bl	80003a0 <bad_addr_double_word_write>
      break;
 8000456:	e00c      	b.n	8000472 <trigger_crash+0x66>
    case 4:
      stkerr_from_psp();
 8000458:	f7ff ff1c 	bl	8000294 <stkerr_from_psp>
      break;
 800045c:	e009      	b.n	8000472 <trigger_crash+0x66>
    case 5:
      unaligned_double_word_read();
 800045e:	f7ff ff83 	bl	8000368 <unaligned_double_word_read>
      break;
 8000462:	e006      	b.n	8000472 <trigger_crash+0x66>
    case 6:
      bad_memory_access_crash();
 8000464:	f7ff ff62 	bl	800032c <bad_memory_access_crash>
      break;
 8000468:	e003      	b.n	8000472 <trigger_crash+0x66>
    case 7:
      trigger_irq();
 800046a:	f7ff fef3 	bl	8000254 <trigger_irq>
      break;
 800046e:	e000      	b.n	8000472 <trigger_crash+0x66>
    default:
      break;
 8000470:	bf00      	nop
  }
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop

0800047c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800047c:	b5b0      	push	{r4, r5, r7, lr}
 800047e:	b092      	sub	sp, #72	; 0x48
 8000480:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000482:	f000 fa74 	bl	800096e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000486:	f000 f845 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048a:	f000 f88f 	bl	80005ac <MX_GPIO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of theQueue */
  osMessageQStaticDef(theQueue, 1, unsigned long, theQueueBuffer, &theQueueControlBlock);
 800048e:	4b1b      	ldr	r3, [pc, #108]	; (80004fc <main+0x80>)
 8000490:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000494:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000496:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  theQueueHandle = osMessageCreate(osMessageQ(theQueue), NULL);
 800049a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f001 fedf 	bl	8002264 <osMessageCreate>
 80004a6:	4602      	mov	r2, r0
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <main+0x84>)
 80004aa:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ping */
  osThreadStaticDef(ping, prvQueuePingTask, osPriorityBelowNormal, 0, 128, pingTaskBuffer, &pingTaskControlBlock);
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <main+0x88>)
 80004ae:	f107 041c 	add.w	r4, r7, #28
 80004b2:	461d      	mov	r5, r3
 80004b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pingHandle = osThreadCreate(osThread(ping), (void *)mainQUEUE_SEND_PARAMETER);
 80004c0:	f107 031c 	add.w	r3, r7, #28
 80004c4:	f241 1111 	movw	r1, #4369	; 0x1111
 80004c8:	4618      	mov	r0, r3
 80004ca:	f001 fea6 	bl	800221a <osThreadCreate>
 80004ce:	4602      	mov	r2, r0
 80004d0:	4b0d      	ldr	r3, [pc, #52]	; (8000508 <main+0x8c>)
 80004d2:	601a      	str	r2, [r3, #0]

  /* definition and creation of pong */
  osThreadStaticDef(pong, prvQueuePongTask, osPriorityLow, 0, 128, pongTaskBuffer, &pongTaskControlBlock);
 80004d4:	4b0d      	ldr	r3, [pc, #52]	; (800050c <main+0x90>)
 80004d6:	463c      	mov	r4, r7
 80004d8:	461d      	mov	r5, r3
 80004da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80004e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pongHandle = osThreadCreate(osThread(pong), (void *)mainQUEUE_RECEIVE_PARAMETER);
 80004e6:	463b      	mov	r3, r7
 80004e8:	2122      	movs	r1, #34	; 0x22
 80004ea:	4618      	mov	r0, r3
 80004ec:	f001 fe95 	bl	800221a <osThreadCreate>
 80004f0:	4602      	mov	r2, r0
 80004f2:	4b07      	ldr	r3, [pc, #28]	; (8000510 <main+0x94>)
 80004f4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80004f6:	f001 fe89 	bl	800220c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <main+0x7e>
 80004fc:	08004198 	.word	0x08004198
 8000500:	200006b8 	.word	0x200006b8
 8000504:	080041b0 	.word	0x080041b0
 8000508:	200005c0 	.word	0x200005c0
 800050c:	080041d4 	.word	0x080041d4
 8000510:	200005bc 	.word	0x200005bc

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b094      	sub	sp, #80	; 0x50
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	2238      	movs	r2, #56	; 0x38
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f003 fe23 	bl	800416e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000536:	2000      	movs	r0, #0
 8000538:	f000 fcca 	bl	8000ed0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800053c:	2302      	movs	r3, #2
 800053e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000540:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000544:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000546:	2340      	movs	r3, #64	; 0x40
 8000548:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054e:	2302      	movs	r3, #2
 8000550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000552:	2301      	movs	r3, #1
 8000554:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 21;
 8000556:	2315      	movs	r3, #21
 8000558:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055a:	2302      	movs	r3, #2
 800055c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800055e:	2302      	movs	r3, #2
 8000560:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000562:	2302      	movs	r3, #2
 8000564:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000566:	f107 0318 	add.w	r3, r7, #24
 800056a:	4618      	mov	r0, r3
 800056c:	f000 fd64 	bl	8001038 <HAL_RCC_OscConfig>
 8000570:	4603      	mov	r3, r0
 8000572:	2b00      	cmp	r3, #0
 8000574:	d001      	beq.n	800057a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000576:	f000 f8b1 	bl	80006dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800057a:	230f      	movs	r3, #15
 800057c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057e:	2303      	movs	r3, #3
 8000580:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000586:	2300      	movs	r3, #0
 8000588:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800058a:	2300      	movs	r3, #0
 800058c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	2104      	movs	r1, #4
 8000592:	4618      	mov	r0, r3
 8000594:	f001 f868 	bl	8001668 <HAL_RCC_ClockConfig>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800059e:	f000 f89d 	bl	80006dc <Error_Handler>
  }
}
 80005a2:	bf00      	nop
 80005a4:	3750      	adds	r7, #80	; 0x50
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
	...

080005ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b088      	sub	sp, #32
 80005b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 030c 	add.w	r3, r7, #12
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_GPIO_Init+0x78>)
 80005c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c6:	4a17      	ldr	r2, [pc, #92]	; (8000624 <MX_GPIO_Init+0x78>)
 80005c8:	f043 0301 	orr.w	r3, r3, #1
 80005cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_GPIO_Init+0x78>)
 80005d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005d2:	f003 0301 	and.w	r3, r3, #1
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005da:	4b12      	ldr	r3, [pc, #72]	; (8000624 <MX_GPIO_Init+0x78>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a11      	ldr	r2, [pc, #68]	; (8000624 <MX_GPIO_Init+0x78>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_GPIO_Init+0x78>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USERLED_GPIO_Port, USERLED_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2120      	movs	r1, #32
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f000 fc51 	bl	8000ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USERLED_Pin */
  GPIO_InitStruct.Pin = USERLED_Pin;
 80005fe:	2320      	movs	r3, #32
 8000600:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USERLED_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 030c 	add.w	r3, r7, #12
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f000 fac0 	bl	8000b9c <HAL_GPIO_Init>

}
 800061c:	bf00      	nop
 800061e:	3720      	adds	r7, #32
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000

08000628 <prvQueuePingTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_prvQueuePingTask */
void prvQueuePingTask(void const * argument)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	//HAL_GPIO_TogglePin(USERLED_GPIO_Port, USERLED_Pin);
	TickType_t xNextWakeTime;
	const unsigned long ulValueToSend = 100UL;
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	617b      	str	r3, [r7, #20]

	configASSERT(((unsigned long)argument) == mainQUEUE_SEND_PARAMETER);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f241 1211 	movw	r2, #4369	; 0x1111
 800063a:	4293      	cmp	r3, r2
 800063c:	d009      	beq.n	8000652 <prvQueuePingTask+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800063e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000642:	f383 8811 	msr	BASEPRI, r3
 8000646:	f3bf 8f6f 	isb	sy
 800064a:	f3bf 8f4f 	dsb	sy
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	e7fe      	b.n	8000650 <prvQueuePingTask+0x28>

	xNextWakeTime = xTaskGetTickCount();
 8000652:	f002 ff3d 	bl	80034d0 <xTaskGetTickCount>
 8000656:	4603      	mov	r3, r0
 8000658:	60fb      	str	r3, [r7, #12]

	while (1) {


		vTaskDelayUntil(&xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS);
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2101      	movs	r1, #1
 8000660:	4618      	mov	r0, r3
 8000662:	f002 fdb3 	bl	80031cc <vTaskDelayUntil>

		//xQueueSend(theQueue, &ulValueToSend, 0U);
		osMessagePut(theQueueHandle, ulValueToSend, 0U);
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <prvQueuePingTask+0x58>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2200      	movs	r2, #0
 800066c:	6979      	ldr	r1, [r7, #20]
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fe10 	bl	8002294 <osMessagePut>

		trigger_crash(g_crash_config);
 8000674:	4b03      	ldr	r3, [pc, #12]	; (8000684 <prvQueuePingTask+0x5c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4618      	mov	r0, r3
 800067a:	f7ff fec7 	bl	800040c <trigger_crash>
		vTaskDelayUntil(&xNextWakeTime, mainQUEUE_SEND_FREQUENCY_MS);
 800067e:	e7ec      	b.n	800065a <prvQueuePingTask+0x32>
 8000680:	200006b8 	.word	0x200006b8
 8000684:	20000000 	.word	0x20000000

08000688 <prvQueuePongTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvQueuePongTask */
void prvQueuePongTask(void const * argument)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN prvQueuePongTask */
  while (1) {
	unsigned long ulReceivedValue;
	osEvent event = osMessageGet(theQueueHandle, portMAX_DELAY);
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <prvQueuePongTask+0x2c>)
 8000692:	6819      	ldr	r1, [r3, #0]
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800069c:	4618      	mov	r0, r3
 800069e:	f001 fe39 	bl	8002314 <osMessageGet>
	ulReceivedValue = event.value.v;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	617b      	str	r3, [r7, #20]
	if (ulReceivedValue == 100UL) {
 80006a6:	697b      	ldr	r3, [r7, #20]
 80006a8:	2b64      	cmp	r3, #100	; 0x64
 80006aa:	d1f1      	bne.n	8000690 <prvQueuePongTask+0x8>
	  ulReceivedValue = 0U;
 80006ac:	2300      	movs	r3, #0
 80006ae:	617b      	str	r3, [r7, #20]
  while (1) {
 80006b0:	e7ee      	b.n	8000690 <prvQueuePongTask+0x8>
 80006b2:	bf00      	nop
 80006b4:	200006b8 	.word	0x200006b8

080006b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d101      	bne.n	80006ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ca:	f000 f969 	bl	80009a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40014800 	.word	0x40014800

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
	...

080006ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <HAL_MspInit+0x44>)
 80006f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f6:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <HAL_MspInit+0x44>)
 80006f8:	f043 0301 	orr.w	r3, r3, #1
 80006fc:	6613      	str	r3, [r2, #96]	; 0x60
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <HAL_MspInit+0x44>)
 8000700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000702:	f003 0301 	and.w	r3, r3, #1
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <HAL_MspInit+0x44>)
 800070c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <HAL_MspInit+0x44>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6593      	str	r3, [r2, #88]	; 0x58
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_MspInit+0x44>)
 8000718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000722:	f000 fc79 	bl	8001018 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000

08000734 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000744:	2300      	movs	r3, #0
 8000746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800074a:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <HAL_InitTick+0xcc>)
 800074c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800074e:	4a2c      	ldr	r2, [pc, #176]	; (8000800 <HAL_InitTick+0xcc>)
 8000750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000754:	6613      	str	r3, [r2, #96]	; 0x60
 8000756:	4b2a      	ldr	r3, [pc, #168]	; (8000800 <HAL_InitTick+0xcc>)
 8000758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000762:	f107 020c 	add.w	r2, r7, #12
 8000766:	f107 0310 	add.w	r3, r7, #16
 800076a:	4611      	mov	r1, r2
 800076c:	4618      	mov	r0, r3
 800076e:	f001 f93b 	bl	80019e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000772:	f001 f923 	bl	80019bc <HAL_RCC_GetPCLK2Freq>
 8000776:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800077a:	4a22      	ldr	r2, [pc, #136]	; (8000804 <HAL_InitTick+0xd0>)
 800077c:	fba2 2303 	umull	r2, r3, r2, r3
 8000780:	0c9b      	lsrs	r3, r3, #18
 8000782:	3b01      	subs	r3, #1
 8000784:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <HAL_InitTick+0xd4>)
 8000788:	4a20      	ldr	r2, [pc, #128]	; (800080c <HAL_InitTick+0xd8>)
 800078a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 800078c:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <HAL_InitTick+0xd4>)
 800078e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000792:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8000794:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <HAL_InitTick+0xd4>)
 8000796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000798:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <HAL_InitTick+0xd4>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a0:	4b19      	ldr	r3, [pc, #100]	; (8000808 <HAL_InitTick+0xd4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&htim17);
 80007a6:	4818      	ldr	r0, [pc, #96]	; (8000808 <HAL_InitTick+0xd4>)
 80007a8:	f001 f996 	bl	8001ad8 <HAL_TIM_Base_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80007b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d11b      	bne.n	80007f2 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 80007ba:	4813      	ldr	r0, [pc, #76]	; (8000808 <HAL_InitTick+0xd4>)
 80007bc:	f001 f9ee 	bl	8001b9c <HAL_TIM_Base_Start_IT>
 80007c0:	4603      	mov	r3, r0
 80007c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80007c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d111      	bne.n	80007f2 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80007ce:	201a      	movs	r0, #26
 80007d0:	f000 f9d6 	bl	8000b80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b0f      	cmp	r3, #15
 80007d8:	d808      	bhi.n	80007ec <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority, 0U);
 80007da:	2200      	movs	r2, #0
 80007dc:	6879      	ldr	r1, [r7, #4]
 80007de:	201a      	movs	r0, #26
 80007e0:	f000 f9b4 	bl	8000b4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e4:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <HAL_InitTick+0xdc>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6013      	str	r3, [r2, #0]
 80007ea:	e002      	b.n	80007f2 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 80007ec:	2301      	movs	r3, #1
 80007ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }
 /* Return function status */
  return status;
 80007f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3730      	adds	r7, #48	; 0x30
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000
 8000804:	431bde83 	.word	0x431bde83
 8000808:	200008bc 	.word	0x200008bc
 800080c:	40014800 	.word	0x40014800
 8000810:	20000008 	.word	0x20000008

08000814 <my_fault_handler_c>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

__attribute__((optimize("O0")))
void my_fault_handler_c(sContextStateFrame *frame) {
 8000814:	b480      	push	{r7}
 8000816:	b087      	sub	sp, #28
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  HALT_IF_DEBUGGING();
 800081c:	4b18      	ldr	r3, [pc, #96]	; (8000880 <my_fault_handler_c+0x6c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f003 0301 	and.w	r3, r3, #1
 8000824:	2b00      	cmp	r3, #0
 8000826:	d000      	beq.n	800082a <my_fault_handler_c+0x16>
 8000828:	be01      	bkpt	0x0001
  //
  // Example "recovery" mechanism for UsageFaults while not running
  // in an ISR
  //

  volatile uint32_t *cfsr = (volatile uint32_t *)0xE000ED28;
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <my_fault_handler_c+0x70>)
 800082c:	617b      	str	r3, [r7, #20]
  const uint32_t usage_fault_mask = 0xffff0000;
 800082e:	4b16      	ldr	r3, [pc, #88]	; (8000888 <my_fault_handler_c+0x74>)
 8000830:	613b      	str	r3, [r7, #16]
  const uint8_t non_usage_fault_occurred = (*cfsr & ~usage_fault_mask) != 0;
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	43db      	mvns	r3, r3
 800083a:	4013      	ands	r3, r2
 800083c:	2b00      	cmp	r3, #0
 800083e:	bf14      	ite	ne
 8000840:	2301      	movne	r3, #1
 8000842:	2300      	moveq	r3, #0
 8000844:	b2db      	uxtb	r3, r3
 8000846:	73fb      	strb	r3, [r7, #15]
  // the bottom 8 bits of the xpsr hold the exception number of the
  // executing exception or 0 if the processor is in Thread mode
  const uint8_t faulted_from_exception = ((frame->xpsr & 0xFF) != 0);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	69db      	ldr	r3, [r3, #28]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	bf14      	ite	ne
 8000852:	2301      	movne	r3, #1
 8000854:	2300      	moveq	r3, #0
 8000856:	b2db      	uxtb	r3, r3
 8000858:	73bb      	strb	r3, [r7, #14]

  if (faulted_from_exception || non_usage_fault_occurred) {
 800085a:	7bbb      	ldrb	r3, [r7, #14]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d102      	bne.n	8000866 <my_fault_handler_c+0x52>
 8000860:	7bfb      	ldrb	r3, [r7, #15]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d005      	beq.n	8000872 <my_fault_handler_c+0x5e>
    // For any fault within an ISR or non-usage faults let's reboot the system
    volatile uint32_t *aircr = (volatile uint32_t *)0xE000ED0C;
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <my_fault_handler_c+0x78>)
 8000868:	60bb      	str	r3, [r7, #8]
    *aircr = (0x05FA << 16) | 0x1 << 2;
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	4a08      	ldr	r2, [pc, #32]	; (8000890 <my_fault_handler_c+0x7c>)
 800086e:	601a      	str	r2, [r3, #0]
    while (1) { } // should be unreachable
 8000870:	e7fe      	b.n	8000870 <my_fault_handler_c+0x5c>
  }
}
 8000872:	bf00      	nop
 8000874:	371c      	adds	r7, #28
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	e000edf0 	.word	0xe000edf0
 8000884:	e000ed28 	.word	0xe000ed28
 8000888:	ffff0000 	.word	0xffff0000
 800088c:	e000ed0c 	.word	0xe000ed0c
 8000890:	05fa0004 	.word	0x05fa0004

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HARDFAULT_HANDLING_ASM();
 80008a6:	f01e 0f04 	tst.w	lr, #4
 80008aa:	bf0c      	ite	eq
 80008ac:	f3ef 8008 	mrseq	r0, MSP
 80008b0:	f3ef 8009 	mrsne	r0, PSP
 80008b4:	f7ff bfae 	b.w	8000814 <my_fault_handler_c>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <HardFault_Handler+0x16>

080008ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <MemManage_Handler+0x4>

080008c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <BusFault_Handler+0x4>

080008c6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <UsageFault_Handler+0x4>

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80008e2:	f001 f9d3 	bl	8001c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200008bc 	.word	0x200008bc

080008f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <SystemInit+0x28>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fa:	4a07      	ldr	r2, [pc, #28]	; (8000918 <SystemInit+0x28>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <SystemInit+0x28>)
 8000906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800090a:	609a      	str	r2, [r3, #8]
#endif
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800091c:	480d      	ldr	r0, [pc, #52]	; (8000954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800091e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000920:	480d      	ldr	r0, [pc, #52]	; (8000958 <LoopForever+0x6>)
  ldr r1, =_edata
 8000922:	490e      	ldr	r1, [pc, #56]	; (800095c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000924:	4a0e      	ldr	r2, [pc, #56]	; (8000960 <LoopForever+0xe>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0b      	ldr	r2, [pc, #44]	; (8000964 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000938:	4c0b      	ldr	r4, [pc, #44]	; (8000968 <LoopForever+0x16>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000946:	f7ff ffd3 	bl	80008f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094a:	f003 fbe1 	bl	8004110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800094e:	f7ff fd95 	bl	800047c <main>

08000952 <LoopForever>:

LoopForever:
    b LoopForever
 8000952:	e7fe      	b.n	8000952 <LoopForever>
  ldr   r0, =_estack
 8000954:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800095c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000960:	08004218 	.word	0x08004218
  ldr r2, =_sbss
 8000964:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000968:	2000090c 	.word	0x2000090c

0800096c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_2_IRQHandler>

0800096e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b082      	sub	sp, #8
 8000972:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000974:	2300      	movs	r3, #0
 8000976:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 f8dc 	bl	8000b36 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097e:	2000      	movs	r0, #0
 8000980:	f7ff fed8 	bl	8000734 <HAL_InitTick>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d002      	beq.n	8000990 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	e001      	b.n	8000994 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000990:	f7ff feac 	bl	80006ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000994:	79fb      	ldrb	r3, [r7, #7]

}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_IncTick+0x1c>)
 80009a6:	681a      	ldr	r2, [r3, #0]
 80009a8:	4b05      	ldr	r3, [pc, #20]	; (80009c0 <HAL_IncTick+0x20>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4413      	add	r3, r2
 80009ae:	4a03      	ldr	r2, [pc, #12]	; (80009bc <HAL_IncTick+0x1c>)
 80009b0:	6013      	str	r3, [r2, #0]
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	20000908 	.word	0x20000908
 80009c0:	2000000c 	.word	0x2000000c

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	20000908 	.word	0x20000908

080009dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db0b      	blt.n	8000a6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	4907      	ldr	r1, [pc, #28]	; (8000a78 <__NVIC_EnableIRQ+0x38>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ff4c 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5a:	f7ff ff63 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000b5e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	6978      	ldr	r0, [r7, #20]
 8000b66:	f7ff ffb3 	bl	8000ad0 <NVIC_EncodePriority>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b70:	4611      	mov	r1, r2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ff82 	bl	8000a7c <__NVIC_SetPriority>
}
 8000b78:	bf00      	nop
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff ff56 	bl	8000a40 <__NVIC_EnableIRQ>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b087      	sub	sp, #28
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000baa:	e15a      	b.n	8000e62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 814c 	beq.w	8000e5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d00b      	beq.n	8000be4 <HAL_GPIO_Init+0x48>
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d007      	beq.n	8000be4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd8:	2b11      	cmp	r3, #17
 8000bda:	d003      	beq.n	8000be4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	2b12      	cmp	r3, #18
 8000be2:	d130      	bne.n	8000c46 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	689b      	ldr	r3, [r3, #8]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68da      	ldr	r2, [r3, #12]
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	091b      	lsrs	r3, r3, #4
 8000c30:	f003 0201 	and.w	r2, r3, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0xea>
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b12      	cmp	r3, #18
 8000c84:	d123      	bne.n	8000cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	220f      	movs	r2, #15
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	f003 0307 	and.w	r3, r3, #7
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	08da      	lsrs	r2, r3, #3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3208      	adds	r2, #8
 8000cc8:	6939      	ldr	r1, [r7, #16]
 8000cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 0203 	and.w	r2, r3, #3
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 80a6 	beq.w	8000e5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d10:	4b5b      	ldr	r3, [pc, #364]	; (8000e80 <HAL_GPIO_Init+0x2e4>)
 8000d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d14:	4a5a      	ldr	r2, [pc, #360]	; (8000e80 <HAL_GPIO_Init+0x2e4>)
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1c:	4b58      	ldr	r3, [pc, #352]	; (8000e80 <HAL_GPIO_Init+0x2e4>)
 8000d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d28:	4a56      	ldr	r2, [pc, #344]	; (8000e84 <HAL_GPIO_Init+0x2e8>)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	089b      	lsrs	r3, r3, #2
 8000d2e:	3302      	adds	r3, #2
 8000d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	220f      	movs	r2, #15
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d52:	d01f      	beq.n	8000d94 <HAL_GPIO_Init+0x1f8>
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	4a4c      	ldr	r2, [pc, #304]	; (8000e88 <HAL_GPIO_Init+0x2ec>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d019      	beq.n	8000d90 <HAL_GPIO_Init+0x1f4>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4a4b      	ldr	r2, [pc, #300]	; (8000e8c <HAL_GPIO_Init+0x2f0>)
 8000d60:	4293      	cmp	r3, r2
 8000d62:	d013      	beq.n	8000d8c <HAL_GPIO_Init+0x1f0>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a4a      	ldr	r2, [pc, #296]	; (8000e90 <HAL_GPIO_Init+0x2f4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d00d      	beq.n	8000d88 <HAL_GPIO_Init+0x1ec>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a49      	ldr	r2, [pc, #292]	; (8000e94 <HAL_GPIO_Init+0x2f8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d007      	beq.n	8000d84 <HAL_GPIO_Init+0x1e8>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a48      	ldr	r2, [pc, #288]	; (8000e98 <HAL_GPIO_Init+0x2fc>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d101      	bne.n	8000d80 <HAL_GPIO_Init+0x1e4>
 8000d7c:	2305      	movs	r3, #5
 8000d7e:	e00a      	b.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d80:	2306      	movs	r3, #6
 8000d82:	e008      	b.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d84:	2304      	movs	r3, #4
 8000d86:	e006      	b.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d88:	2303      	movs	r3, #3
 8000d8a:	e004      	b.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	e002      	b.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d90:	2301      	movs	r3, #1
 8000d92:	e000      	b.n	8000d96 <HAL_GPIO_Init+0x1fa>
 8000d94:	2300      	movs	r3, #0
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	f002 0203 	and.w	r2, r2, #3
 8000d9c:	0092      	lsls	r2, r2, #2
 8000d9e:	4093      	lsls	r3, r2
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000da6:	4937      	ldr	r1, [pc, #220]	; (8000e84 <HAL_GPIO_Init+0x2e8>)
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	089b      	lsrs	r3, r3, #2
 8000dac:	3302      	adds	r3, #2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000db4:	4b39      	ldr	r3, [pc, #228]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000dd8:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000dde:	4b2f      	ldr	r3, [pc, #188]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e02:	4a26      	ldr	r2, [pc, #152]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e08:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4013      	ands	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d003      	beq.n	8000e56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e56:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <HAL_GPIO_Init+0x300>)
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	fa22 f303 	lsr.w	r3, r2, r3
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f47f ae9d 	bne.w	8000bac <HAL_GPIO_Init+0x10>
  }
}
 8000e72:	bf00      	nop
 8000e74:	371c      	adds	r7, #28
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	40010000 	.word	0x40010000
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	48000c00 	.word	0x48000c00
 8000e94:	48001000 	.word	0x48001000
 8000e98:	48001400 	.word	0x48001400
 8000e9c:	40010400 	.word	0x40010400

08000ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	807b      	strh	r3, [r7, #2]
 8000eac:	4613      	mov	r3, r2
 8000eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000eb0:	787b      	ldrb	r3, [r7, #1]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000eb6:	887a      	ldrh	r2, [r7, #2]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d141      	bne.n	8000f62 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000ede:	4b4b      	ldr	r3, [pc, #300]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000eea:	d131      	bne.n	8000f50 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000eec:	4b47      	ldr	r3, [pc, #284]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ef2:	4a46      	ldr	r2, [pc, #280]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ef8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000efc:	4b43      	ldr	r3, [pc, #268]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f04:	4a41      	ldr	r2, [pc, #260]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f0c:	4b40      	ldr	r3, [pc, #256]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2232      	movs	r2, #50	; 0x32
 8000f12:	fb02 f303 	mul.w	r3, r2, r3
 8000f16:	4a3f      	ldr	r2, [pc, #252]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000f18:	fba2 2303 	umull	r2, r3, r2, r3
 8000f1c:	0c9b      	lsrs	r3, r3, #18
 8000f1e:	3301      	adds	r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f22:	e002      	b.n	8000f2a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f2a:	4b38      	ldr	r3, [pc, #224]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f36:	d102      	bne.n	8000f3e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1f2      	bne.n	8000f24 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f3e:	4b33      	ldr	r3, [pc, #204]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f4a:	d158      	bne.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e057      	b.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f50:	4b2e      	ldr	r3, [pc, #184]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f56:	4a2d      	ldr	r2, [pc, #180]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000f60:	e04d      	b.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f68:	d141      	bne.n	8000fee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000f6a:	4b28      	ldr	r3, [pc, #160]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f76:	d131      	bne.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000f78:	4b24      	ldr	r3, [pc, #144]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000f7e:	4a23      	ldr	r2, [pc, #140]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f88:	4b20      	ldr	r3, [pc, #128]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f90:	4a1e      	ldr	r2, [pc, #120]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2232      	movs	r2, #50	; 0x32
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	4a1c      	ldr	r2, [pc, #112]	; (8001014 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa8:	0c9b      	lsrs	r3, r3, #18
 8000faa:	3301      	adds	r3, #1
 8000fac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fae:	e002      	b.n	8000fb6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fb6:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fc2:	d102      	bne.n	8000fca <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1f2      	bne.n	8000fb0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fcc:	695b      	ldr	r3, [r3, #20]
 8000fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fd6:	d112      	bne.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e011      	b.n	8001000 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000fe2:	4a0a      	ldr	r2, [pc, #40]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000fec:	e007      	b.n	8000ffe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ff6:	4a05      	ldr	r2, [pc, #20]	; (800100c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ff8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ffc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	40007000 	.word	0x40007000
 8001010:	20000004 	.word	0x20000004
 8001014:	431bde83 	.word	0x431bde83

08001018 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	4a04      	ldr	r2, [pc, #16]	; (8001034 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001022:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001026:	6093      	str	r3, [r2, #8]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40007000 	.word	0x40007000

08001038 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e308      	b.n	800165c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	2b00      	cmp	r3, #0
 8001054:	d075      	beq.n	8001142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001056:	4ba3      	ldr	r3, [pc, #652]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001060:	4ba0      	ldr	r3, [pc, #640]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f003 0303 	and.w	r3, r3, #3
 8001068:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2b0c      	cmp	r3, #12
 800106e:	d102      	bne.n	8001076 <HAL_RCC_OscConfig+0x3e>
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b03      	cmp	r3, #3
 8001074:	d002      	beq.n	800107c <HAL_RCC_OscConfig+0x44>
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	2b08      	cmp	r3, #8
 800107a:	d10b      	bne.n	8001094 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	4b99      	ldr	r3, [pc, #612]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d05b      	beq.n	8001140 <HAL_RCC_OscConfig+0x108>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d157      	bne.n	8001140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	e2e3      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800109c:	d106      	bne.n	80010ac <HAL_RCC_OscConfig+0x74>
 800109e:	4b91      	ldr	r3, [pc, #580]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a90      	ldr	r2, [pc, #576]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	6013      	str	r3, [r2, #0]
 80010aa:	e01d      	b.n	80010e8 <HAL_RCC_OscConfig+0xb0>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x98>
 80010b6:	4b8b      	ldr	r3, [pc, #556]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a8a      	ldr	r2, [pc, #552]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	6013      	str	r3, [r2, #0]
 80010c2:	4b88      	ldr	r3, [pc, #544]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a87      	ldr	r2, [pc, #540]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e00b      	b.n	80010e8 <HAL_RCC_OscConfig+0xb0>
 80010d0:	4b84      	ldr	r3, [pc, #528]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a83      	ldr	r2, [pc, #524]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b81      	ldr	r3, [pc, #516]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a80      	ldr	r2, [pc, #512]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d013      	beq.n	8001118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f0:	f7ff fc68 	bl	80009c4 <HAL_GetTick>
 80010f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010f6:	e008      	b.n	800110a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010f8:	f7ff fc64 	bl	80009c4 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b64      	cmp	r3, #100	; 0x64
 8001104:	d901      	bls.n	800110a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001106:	2303      	movs	r3, #3
 8001108:	e2a8      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800110a:	4b76      	ldr	r3, [pc, #472]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d0f0      	beq.n	80010f8 <HAL_RCC_OscConfig+0xc0>
 8001116:	e014      	b.n	8001142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001118:	f7ff fc54 	bl	80009c4 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001120:	f7ff fc50 	bl	80009c4 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b64      	cmp	r3, #100	; 0x64
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e294      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001132:	4b6c      	ldr	r3, [pc, #432]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0xe8>
 800113e:	e000      	b.n	8001142 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	2b00      	cmp	r3, #0
 800114c:	d075      	beq.n	800123a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800114e:	4b65      	ldr	r3, [pc, #404]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001158:	4b62      	ldr	r3, [pc, #392]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	f003 0303 	and.w	r3, r3, #3
 8001160:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	2b0c      	cmp	r3, #12
 8001166:	d102      	bne.n	800116e <HAL_RCC_OscConfig+0x136>
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d002      	beq.n	8001174 <HAL_RCC_OscConfig+0x13c>
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	2b04      	cmp	r3, #4
 8001172:	d11f      	bne.n	80011b4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001174:	4b5b      	ldr	r3, [pc, #364]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117c:	2b00      	cmp	r3, #0
 800117e:	d005      	beq.n	800118c <HAL_RCC_OscConfig+0x154>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d101      	bne.n	800118c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001188:	2301      	movs	r3, #1
 800118a:	e267      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800118c:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	691b      	ldr	r3, [r3, #16]
 8001198:	061b      	lsls	r3, r3, #24
 800119a:	4952      	ldr	r1, [pc, #328]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80011a0:	4b51      	ldr	r3, [pc, #324]	; (80012e8 <HAL_RCC_OscConfig+0x2b0>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fac5 	bl	8000734 <HAL_InitTick>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d043      	beq.n	8001238 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e253      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d023      	beq.n	8001204 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011bc:	4b49      	ldr	r3, [pc, #292]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a48      	ldr	r2, [pc, #288]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fbfc 	bl	80009c4 <HAL_GetTick>
 80011cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011ce:	e008      	b.n	80011e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d0:	f7ff fbf8 	bl	80009c4 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d901      	bls.n	80011e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80011de:	2303      	movs	r3, #3
 80011e0:	e23c      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011e2:	4b40      	ldr	r3, [pc, #256]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f0      	beq.n	80011d0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ee:	4b3d      	ldr	r3, [pc, #244]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	691b      	ldr	r3, [r3, #16]
 80011fa:	061b      	lsls	r3, r3, #24
 80011fc:	4939      	ldr	r1, [pc, #228]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80011fe:	4313      	orrs	r3, r2
 8001200:	604b      	str	r3, [r1, #4]
 8001202:	e01a      	b.n	800123a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001204:	4b37      	ldr	r3, [pc, #220]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a36      	ldr	r2, [pc, #216]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800120a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800120e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fbd8 	bl	80009c4 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001218:	f7ff fbd4 	bl	80009c4 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e218      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800122a:	4b2e      	ldr	r3, [pc, #184]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x1e0>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001238:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d03c      	beq.n	80012c0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d01c      	beq.n	8001288 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124e:	4b25      	ldr	r3, [pc, #148]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001254:	4a23      	ldr	r2, [pc, #140]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800125e:	f7ff fbb1 	bl	80009c4 <HAL_GetTick>
 8001262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001264:	e008      	b.n	8001278 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001266:	f7ff fbad 	bl	80009c4 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d901      	bls.n	8001278 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001274:	2303      	movs	r3, #3
 8001276:	e1f1      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001278:	4b1a      	ldr	r3, [pc, #104]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800127a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d0ef      	beq.n	8001266 <HAL_RCC_OscConfig+0x22e>
 8001286:	e01b      	b.n	80012c0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 800128a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128e:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	f023 0301 	bic.w	r3, r3, #1
 8001294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001298:	f7ff fb94 	bl	80009c4 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fb90 	bl	80009c4 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1d4      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b8:	f003 0302 	and.w	r3, r3, #2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1ef      	bne.n	80012a0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0304 	and.w	r3, r3, #4
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f000 80ab 	beq.w	8001424 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d106      	bne.n	80012ec <HAL_RCC_OscConfig+0x2b4>
 80012de:	2301      	movs	r3, #1
 80012e0:	e005      	b.n	80012ee <HAL_RCC_OscConfig+0x2b6>
 80012e2:	bf00      	nop
 80012e4:	40021000 	.word	0x40021000
 80012e8:	20000008 	.word	0x20000008
 80012ec:	2300      	movs	r3, #0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00d      	beq.n	800130e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4baf      	ldr	r3, [pc, #700]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f6:	4aae      	ldr	r2, [pc, #696]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	6593      	str	r3, [r2, #88]	; 0x58
 80012fe:	4bac      	ldr	r3, [pc, #688]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800130a:	2301      	movs	r3, #1
 800130c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800130e:	4ba9      	ldr	r3, [pc, #676]	; (80015b4 <HAL_RCC_OscConfig+0x57c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001316:	2b00      	cmp	r3, #0
 8001318:	d118      	bne.n	800134c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800131a:	4ba6      	ldr	r3, [pc, #664]	; (80015b4 <HAL_RCC_OscConfig+0x57c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4aa5      	ldr	r2, [pc, #660]	; (80015b4 <HAL_RCC_OscConfig+0x57c>)
 8001320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001324:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001326:	f7ff fb4d 	bl	80009c4 <HAL_GetTick>
 800132a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132e:	f7ff fb49 	bl	80009c4 <HAL_GetTick>
 8001332:	4602      	mov	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e18d      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001340:	4b9c      	ldr	r3, [pc, #624]	; (80015b4 <HAL_RCC_OscConfig+0x57c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001348:	2b00      	cmp	r3, #0
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d108      	bne.n	8001366 <HAL_RCC_OscConfig+0x32e>
 8001354:	4b96      	ldr	r3, [pc, #600]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800135a:	4a95      	ldr	r2, [pc, #596]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001364:	e024      	b.n	80013b0 <HAL_RCC_OscConfig+0x378>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d110      	bne.n	8001390 <HAL_RCC_OscConfig+0x358>
 800136e:	4b90      	ldr	r3, [pc, #576]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001374:	4a8e      	ldr	r2, [pc, #568]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800137e:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001384:	4a8a      	ldr	r2, [pc, #552]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800138e:	e00f      	b.n	80013b0 <HAL_RCC_OscConfig+0x378>
 8001390:	4b87      	ldr	r3, [pc, #540]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001396:	4a86      	ldr	r2, [pc, #536]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001398:	f023 0301 	bic.w	r3, r3, #1
 800139c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013a0:	4b83      	ldr	r3, [pc, #524]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80013a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013a6:	4a82      	ldr	r2, [pc, #520]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80013a8:	f023 0304 	bic.w	r3, r3, #4
 80013ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d016      	beq.n	80013e6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b8:	f7ff fb04 	bl	80009c4 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013be:	e00a      	b.n	80013d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c0:	f7ff fb00 	bl	80009c4 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e142      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013d6:	4b76      	ldr	r3, [pc, #472]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80013d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d0ed      	beq.n	80013c0 <HAL_RCC_OscConfig+0x388>
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013e6:	f7ff faed 	bl	80009c4 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ee:	f7ff fae9 	bl	80009c4 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d901      	bls.n	8001404 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001400:	2303      	movs	r3, #3
 8001402:	e12b      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001404:	4b6a      	ldr	r3, [pc, #424]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1ed      	bne.n	80013ee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001412:	7ffb      	ldrb	r3, [r7, #31]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d105      	bne.n	8001424 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001418:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141c:	4a64      	ldr	r2, [pc, #400]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800141e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001422:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0320 	and.w	r3, r3, #32
 800142c:	2b00      	cmp	r3, #0
 800142e:	d03c      	beq.n	80014aa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d01c      	beq.n	8001472 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001438:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800143a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800143e:	4a5c      	ldr	r2, [pc, #368]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001448:	f7ff fabc 	bl	80009c4 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001450:	f7ff fab8 	bl	80009c4 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e0fc      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001462:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001464:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001468:	f003 0302 	and.w	r3, r3, #2
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0ef      	beq.n	8001450 <HAL_RCC_OscConfig+0x418>
 8001470:	e01b      	b.n	80014aa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001472:	4b4f      	ldr	r3, [pc, #316]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001474:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001478:	4a4d      	ldr	r2, [pc, #308]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800147a:	f023 0301 	bic.w	r3, r3, #1
 800147e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001482:	f7ff fa9f 	bl	80009c4 <HAL_GetTick>
 8001486:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001488:	e008      	b.n	800149c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800148a:	f7ff fa9b 	bl	80009c4 <HAL_GetTick>
 800148e:	4602      	mov	r2, r0
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	2b02      	cmp	r3, #2
 8001496:	d901      	bls.n	800149c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e0df      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800149c:	4b44      	ldr	r3, [pc, #272]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800149e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1ef      	bne.n	800148a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 80d3 	beq.w	800165a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014b4:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	f003 030c 	and.w	r3, r3, #12
 80014bc:	2b0c      	cmp	r3, #12
 80014be:	f000 808d 	beq.w	80015dc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d15a      	bne.n	8001580 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ca:	4b39      	ldr	r3, [pc, #228]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a38      	ldr	r2, [pc, #224]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80014d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d6:	f7ff fa75 	bl	80009c4 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014dc:	e008      	b.n	80014f0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014de:	f7ff fa71 	bl	80009c4 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d901      	bls.n	80014f0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e0b5      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f0      	bne.n	80014de <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014fc:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <HAL_RCC_OscConfig+0x580>)
 8001502:	4013      	ands	r3, r2
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	6a11      	ldr	r1, [r2, #32]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800150c:	3a01      	subs	r2, #1
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	4311      	orrs	r1, r2
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001516:	0212      	lsls	r2, r2, #8
 8001518:	4311      	orrs	r1, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800151e:	0852      	lsrs	r2, r2, #1
 8001520:	3a01      	subs	r2, #1
 8001522:	0552      	lsls	r2, r2, #21
 8001524:	4311      	orrs	r1, r2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800152a:	0852      	lsrs	r2, r2, #1
 800152c:	3a01      	subs	r2, #1
 800152e:	0652      	lsls	r2, r2, #25
 8001530:	4311      	orrs	r1, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001536:	06d2      	lsls	r2, r2, #27
 8001538:	430a      	orrs	r2, r1
 800153a:	491d      	ldr	r1, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800153c:	4313      	orrs	r3, r2
 800153e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4a17      	ldr	r2, [pc, #92]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001552:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001556:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001558:	f7ff fa34 	bl	80009c4 <HAL_GetTick>
 800155c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001560:	f7ff fa30 	bl	80009c4 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e074      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d0f0      	beq.n	8001560 <HAL_RCC_OscConfig+0x528>
 800157e:	e06c      	b.n	800165a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800158a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 8001592:	f023 0303 	bic.w	r3, r3, #3
 8001596:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001598:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	4a04      	ldr	r2, [pc, #16]	; (80015b0 <HAL_RCC_OscConfig+0x578>)
 800159e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a8:	f7ff fa0c 	bl	80009c4 <HAL_GetTick>
 80015ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ae:	e00e      	b.n	80015ce <HAL_RCC_OscConfig+0x596>
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40007000 	.word	0x40007000
 80015b8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015bc:	f7ff fa02 	bl	80009c4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e046      	b.n	800165c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ce:	4b25      	ldr	r3, [pc, #148]	; (8001664 <HAL_RCC_OscConfig+0x62c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x584>
 80015da:	e03e      	b.n	800165a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e039      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80015e8:	4b1e      	ldr	r3, [pc, #120]	; (8001664 <HAL_RCC_OscConfig+0x62c>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	f003 0203 	and.w	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d12c      	bne.n	8001656 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001606:	3b01      	subs	r3, #1
 8001608:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160a:	429a      	cmp	r2, r3
 800160c:	d123      	bne.n	8001656 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800161a:	429a      	cmp	r2, r3
 800161c:	d11b      	bne.n	8001656 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001628:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800162a:	429a      	cmp	r2, r3
 800162c:	d113      	bne.n	8001656 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	3b01      	subs	r3, #1
 800163c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800163e:	429a      	cmp	r2, r3
 8001640:	d109      	bne.n	8001656 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	3b01      	subs	r3, #1
 8001650:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d001      	beq.n	800165a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40021000 	.word	0x40021000

08001668 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e11e      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001680:	4b91      	ldr	r3, [pc, #580]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d910      	bls.n	80016b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b8e      	ldr	r3, [pc, #568]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 020f 	bic.w	r2, r3, #15
 8001696:	498c      	ldr	r1, [pc, #560]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	4313      	orrs	r3, r2
 800169c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169e:	4b8a      	ldr	r3, [pc, #552]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 030f 	and.w	r3, r3, #15
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e106      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d073      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b03      	cmp	r3, #3
 80016c2:	d129      	bne.n	8001718 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c4:	4b81      	ldr	r3, [pc, #516]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0f4      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80016d4:	f000 f9ba 	bl	8001a4c <RCC_GetSysClockFreqFromPLLSource>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4a7c      	ldr	r2, [pc, #496]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d93f      	bls.n	8001762 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80016e2:	4b7a      	ldr	r3, [pc, #488]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d009      	beq.n	8001702 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d033      	beq.n	8001762 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d12f      	bne.n	8001762 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001702:	4b72      	ldr	r3, [pc, #456]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800170a:	4a70      	ldr	r2, [pc, #448]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 800170c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001710:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e024      	b.n	8001762 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d107      	bne.n	8001730 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001720:	4b6a      	ldr	r3, [pc, #424]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d109      	bne.n	8001740 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0c6      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001730:	4b66      	ldr	r3, [pc, #408]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0be      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001740:	f000 f8ce 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 8001744:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4a61      	ldr	r2, [pc, #388]	; (80018d0 <HAL_RCC_ClockConfig+0x268>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d909      	bls.n	8001762 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800174e:	4b5f      	ldr	r3, [pc, #380]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001756:	4a5d      	ldr	r2, [pc, #372]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800175e:	2380      	movs	r3, #128	; 0x80
 8001760:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001762:	4b5a      	ldr	r3, [pc, #360]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f023 0203 	bic.w	r2, r3, #3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4957      	ldr	r1, [pc, #348]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001770:	4313      	orrs	r3, r2
 8001772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001774:	f7ff f926 	bl	80009c4 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	e00a      	b.n	8001792 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177c:	f7ff f922 	bl	80009c4 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f241 3288 	movw	r2, #5000	; 0x1388
 800178a:	4293      	cmp	r3, r2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e095      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001792:	4b4e      	ldr	r3, [pc, #312]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 020c 	and.w	r2, r3, #12
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d1eb      	bne.n	800177c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d023      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d005      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017bc:	4b43      	ldr	r3, [pc, #268]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	4a42      	ldr	r2, [pc, #264]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80017c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d007      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80017d4:	4b3d      	ldr	r3, [pc, #244]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80017dc:	4a3b      	ldr	r2, [pc, #236]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80017de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e4:	4b39      	ldr	r3, [pc, #228]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	4936      	ldr	r1, [pc, #216]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
 80017f6:	e008      	b.n	800180a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2b80      	cmp	r3, #128	; 0x80
 80017fc:	d105      	bne.n	800180a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80017fe:	4b33      	ldr	r3, [pc, #204]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	4a32      	ldr	r2, [pc, #200]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001804:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001808:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d21d      	bcs.n	8001854 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001818:	4b2b      	ldr	r3, [pc, #172]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f023 020f 	bic.w	r2, r3, #15
 8001820:	4929      	ldr	r1, [pc, #164]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	4313      	orrs	r3, r2
 8001826:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001828:	f7ff f8cc 	bl	80009c4 <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182e:	e00a      	b.n	8001846 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001830:	f7ff f8c8 	bl	80009c4 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e03b      	b.n	80018be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_RCC_ClockConfig+0x260>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 030f 	and.w	r3, r3, #15
 800184e:	683a      	ldr	r2, [r7, #0]
 8001850:	429a      	cmp	r2, r3
 8001852:	d1ed      	bne.n	8001830 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	d008      	beq.n	8001872 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001860:	4b1a      	ldr	r3, [pc, #104]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4917      	ldr	r1, [pc, #92]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 800186e:	4313      	orrs	r3, r2
 8001870:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0308 	and.w	r3, r3, #8
 800187a:	2b00      	cmp	r3, #0
 800187c:	d009      	beq.n	8001892 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	00db      	lsls	r3, r3, #3
 800188c:	490f      	ldr	r1, [pc, #60]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001892:	f000 f825 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 8001896:	4601      	mov	r1, r0
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_RCC_ClockConfig+0x264>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	091b      	lsrs	r3, r3, #4
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	4a0c      	ldr	r2, [pc, #48]	; (80018d4 <HAL_RCC_ClockConfig+0x26c>)
 80018a4:	5cd3      	ldrb	r3, [r2, r3]
 80018a6:	f003 031f 	and.w	r3, r3, #31
 80018aa:	fa21 f303 	lsr.w	r3, r1, r3
 80018ae:	4a0a      	ldr	r2, [pc, #40]	; (80018d8 <HAL_RCC_ClockConfig+0x270>)
 80018b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_RCC_ClockConfig+0x274>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe ff3c 	bl	8000734 <HAL_InitTick>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40022000 	.word	0x40022000
 80018cc:	40021000 	.word	0x40021000
 80018d0:	04c4b400 	.word	0x04c4b400
 80018d4:	080041f8 	.word	0x080041f8
 80018d8:	20000004 	.word	0x20000004
 80018dc:	20000008 	.word	0x20000008

080018e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b087      	sub	sp, #28
 80018e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018e6:	4b2c      	ldr	r3, [pc, #176]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 030c 	and.w	r3, r3, #12
 80018ee:	2b04      	cmp	r3, #4
 80018f0:	d102      	bne.n	80018f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018f2:	4b2a      	ldr	r3, [pc, #168]	; (800199c <HAL_RCC_GetSysClockFreq+0xbc>)
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	e047      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018f8:	4b27      	ldr	r3, [pc, #156]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b08      	cmp	r3, #8
 8001902:	d102      	bne.n	800190a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001904:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	e03e      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800190a:	4b23      	ldr	r3, [pc, #140]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b0c      	cmp	r3, #12
 8001914:	d136      	bne.n	8001984 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001916:	4b20      	ldr	r3, [pc, #128]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001920:	4b1d      	ldr	r3, [pc, #116]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3301      	adds	r3, #1
 800192c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b03      	cmp	r3, #3
 8001932:	d10c      	bne.n	800194e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001934:	4a1a      	ldr	r2, [pc, #104]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	fbb2 f3f3 	udiv	r3, r2, r3
 800193c:	4a16      	ldr	r2, [pc, #88]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800193e:	68d2      	ldr	r2, [r2, #12]
 8001940:	0a12      	lsrs	r2, r2, #8
 8001942:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001946:	fb02 f303 	mul.w	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
      break;
 800194c:	e00c      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800194e:	4a13      	ldr	r2, [pc, #76]	; (800199c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001958:	68d2      	ldr	r2, [r2, #12]
 800195a:	0a12      	lsrs	r2, r2, #8
 800195c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	617b      	str	r3, [r7, #20]
      break;
 8001966:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCC_GetSysClockFreq+0xb8>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	0e5b      	lsrs	r3, r3, #25
 800196e:	f003 0303 	and.w	r3, r3, #3
 8001972:	3301      	adds	r3, #1
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	613b      	str	r3, [r7, #16]
 8001982:	e001      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001988:	693b      	ldr	r3, [r7, #16]
}
 800198a:	4618      	mov	r0, r3
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40021000 	.word	0x40021000
 800199c:	00f42400 	.word	0x00f42400
 80019a0:	007a1200 	.word	0x007a1200

080019a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a8:	4b03      	ldr	r3, [pc, #12]	; (80019b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80019c0:	f7ff fff0 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019c4:	4601      	mov	r1, r0
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	0adb      	lsrs	r3, r3, #11
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80019d2:	5cd3      	ldrb	r3, [r2, r3]
 80019d4:	f003 031f 	and.w	r3, r3, #31
 80019d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019dc:	4618      	mov	r0, r3
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08004208 	.word	0x08004208

080019e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	220f      	movs	r2, #15
 80019f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_GetClockConfig+0x5c>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f003 0203 	and.w	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_RCC_GetClockConfig+0x5c>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_RCC_GetClockConfig+0x5c>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_GetClockConfig+0x5c>)
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	08db      	lsrs	r3, r3, #3
 8001a22:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <HAL_RCC_GetClockConfig+0x60>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 020f 	and.w	r2, r3, #15
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	601a      	str	r2, [r3, #0]
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40022000 	.word	0x40022000

08001a4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a52:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3301      	adds	r3, #1
 8001a68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b03      	cmp	r3, #3
 8001a6e:	d10c      	bne.n	8001a8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a70:	4a17      	ldr	r2, [pc, #92]	; (8001ad0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	4a14      	ldr	r2, [pc, #80]	; (8001acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a7a:	68d2      	ldr	r2, [r2, #12]
 8001a7c:	0a12      	lsrs	r2, r2, #8
 8001a7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
    break;
 8001a88:	e00c      	b.n	8001aa4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a8a:	4a12      	ldr	r2, [pc, #72]	; (8001ad4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001a94:	68d2      	ldr	r2, [r2, #12]
 8001a96:	0a12      	lsrs	r2, r2, #8
 8001a98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001a9c:	fb02 f303 	mul.w	r3, r2, r3
 8001aa0:	617b      	str	r3, [r7, #20]
    break;
 8001aa2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001aa4:	4b09      	ldr	r3, [pc, #36]	; (8001acc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	0e5b      	lsrs	r3, r3, #25
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	3301      	adds	r3, #1
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001abe:	687b      	ldr	r3, [r7, #4]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	371c      	adds	r7, #28
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	007a1200 	.word	0x007a1200
 8001ad4:	00f42400 	.word	0x00f42400

08001ad8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e049      	b.n	8001b7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d106      	bne.n	8001b04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001afe:	6878      	ldr	r0, [r7, #4]
 8001b00:	f000 f841 	bl	8001b86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2202      	movs	r2, #2
 8001b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	3304      	adds	r3, #4
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f000 fa60 	bl	8001fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2201      	movs	r2, #1
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2201      	movs	r2, #1
 8001b60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d001      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e054      	b.n	8001c5e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f042 0201 	orr.w	r2, r2, #1
 8001bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a26      	ldr	r2, [pc, #152]	; (8001c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d022      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x80>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bde:	d01d      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x80>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a22      	ldr	r2, [pc, #136]	; (8001c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d018      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x80>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d013      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x80>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a1f      	ldr	r2, [pc, #124]	; (8001c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d00e      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x80>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1e      	ldr	r2, [pc, #120]	; (8001c7c <HAL_TIM_Base_Start_IT+0xe0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d009      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x80>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	; (8001c80 <HAL_TIM_Base_Start_IT+0xe4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d004      	beq.n	8001c1c <HAL_TIM_Base_Start_IT+0x80>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <HAL_TIM_Base_Start_IT+0xe8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d115      	bne.n	8001c48 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_TIM_Base_Start_IT+0xec>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b06      	cmp	r3, #6
 8001c2c:	d015      	beq.n	8001c5a <HAL_TIM_Base_Start_IT+0xbe>
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c34:	d011      	beq.n	8001c5a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f042 0201 	orr.w	r2, r2, #1
 8001c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c46:	e008      	b.n	8001c5a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f042 0201 	orr.w	r2, r2, #1
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	e000      	b.n	8001c5c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	40012c00 	.word	0x40012c00
 8001c70:	40000400 	.word	0x40000400
 8001c74:	40000800 	.word	0x40000800
 8001c78:	40000c00 	.word	0x40000c00
 8001c7c:	40013400 	.word	0x40013400
 8001c80:	40014000 	.word	0x40014000
 8001c84:	40015000 	.word	0x40015000
 8001c88:	00010007 	.word	0x00010007

08001c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d122      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d11b      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0202 	mvn.w	r2, #2
 8001cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f965 	bl	8001f9e <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f957 	bl	8001f8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f968 	bl	8001fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0204 	mvn.w	r2, #4
 8001d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2202      	movs	r2, #2
 8001d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f93b 	bl	8001f9e <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f92d 	bl	8001f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f93e 	bl	8001fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0308 	and.w	r3, r3, #8
 8001d46:	2b08      	cmp	r3, #8
 8001d48:	d122      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d11b      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0208 	mvn.w	r2, #8
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2204      	movs	r2, #4
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f911 	bl	8001f9e <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f903 	bl	8001f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f914 	bl	8001fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b10      	cmp	r3, #16
 8001d9c:	d122      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0310 	and.w	r3, r3, #16
 8001da8:	2b10      	cmp	r3, #16
 8001daa:	d11b      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0210 	mvn.w	r2, #16
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2208      	movs	r2, #8
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8e7 	bl	8001f9e <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f8d9 	bl	8001f8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f8ea 	bl	8001fb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d10e      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d107      	bne.n	8001e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0201 	mvn.w	r2, #1
 8001e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fc54 	bl	80006b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	2b80      	cmp	r3, #128	; 0x80
 8001e1c:	d10e      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e28:	2b80      	cmp	r3, #128	; 0x80
 8001e2a:	d107      	bne.n	8001e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f982 	bl	8002140 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	691b      	ldr	r3, [r3, #16]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e4a:	d10e      	bne.n	8001e6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	2b80      	cmp	r3, #128	; 0x80
 8001e58:	d107      	bne.n	8001e6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f000 f975 	bl	8002154 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e74:	2b40      	cmp	r3, #64	; 0x40
 8001e76:	d10e      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e82:	2b40      	cmp	r3, #64	; 0x40
 8001e84:	d107      	bne.n	8001e96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f898 	bl	8001fc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	f003 0320 	and.w	r3, r3, #32
 8001ea0:	2b20      	cmp	r3, #32
 8001ea2:	d10e      	bne.n	8001ec2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d107      	bne.n	8001ec2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f06f 0220 	mvn.w	r2, #32
 8001eba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 f935 	bl	800212c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ecc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ed0:	d10f      	bne.n	8001ef2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ee0:	d107      	bne.n	8001ef2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8001eea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f93b 	bl	8002168 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f00:	d10f      	bne.n	8001f22 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f10:	d107      	bne.n	8001f22 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8001f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f92d 	bl	800217c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f30:	d10f      	bne.n	8001f52 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f40:	d107      	bne.n	8001f52 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8001f4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f91f 	bl	8002190 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f60:	d10f      	bne.n	8001f82 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f6c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f70:	d107      	bne.n	8001f82 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8001f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f911 	bl	80021a4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a46      	ldr	r2, [pc, #280]	; (8002108 <TIM_Base_SetConfig+0x12c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d017      	beq.n	8002024 <TIM_Base_SetConfig+0x48>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ffa:	d013      	beq.n	8002024 <TIM_Base_SetConfig+0x48>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a43      	ldr	r2, [pc, #268]	; (800210c <TIM_Base_SetConfig+0x130>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d00f      	beq.n	8002024 <TIM_Base_SetConfig+0x48>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a42      	ldr	r2, [pc, #264]	; (8002110 <TIM_Base_SetConfig+0x134>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d00b      	beq.n	8002024 <TIM_Base_SetConfig+0x48>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a41      	ldr	r2, [pc, #260]	; (8002114 <TIM_Base_SetConfig+0x138>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d007      	beq.n	8002024 <TIM_Base_SetConfig+0x48>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a40      	ldr	r2, [pc, #256]	; (8002118 <TIM_Base_SetConfig+0x13c>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d003      	beq.n	8002024 <TIM_Base_SetConfig+0x48>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a3f      	ldr	r2, [pc, #252]	; (800211c <TIM_Base_SetConfig+0x140>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d108      	bne.n	8002036 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800202a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a33      	ldr	r2, [pc, #204]	; (8002108 <TIM_Base_SetConfig+0x12c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d023      	beq.n	8002086 <TIM_Base_SetConfig+0xaa>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002044:	d01f      	beq.n	8002086 <TIM_Base_SetConfig+0xaa>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a30      	ldr	r2, [pc, #192]	; (800210c <TIM_Base_SetConfig+0x130>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01b      	beq.n	8002086 <TIM_Base_SetConfig+0xaa>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a2f      	ldr	r2, [pc, #188]	; (8002110 <TIM_Base_SetConfig+0x134>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d017      	beq.n	8002086 <TIM_Base_SetConfig+0xaa>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a2e      	ldr	r2, [pc, #184]	; (8002114 <TIM_Base_SetConfig+0x138>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <TIM_Base_SetConfig+0xaa>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a2d      	ldr	r2, [pc, #180]	; (8002118 <TIM_Base_SetConfig+0x13c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00f      	beq.n	8002086 <TIM_Base_SetConfig+0xaa>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a2d      	ldr	r2, [pc, #180]	; (8002120 <TIM_Base_SetConfig+0x144>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00b      	beq.n	8002086 <TIM_Base_SetConfig+0xaa>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a2c      	ldr	r2, [pc, #176]	; (8002124 <TIM_Base_SetConfig+0x148>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <TIM_Base_SetConfig+0xaa>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2b      	ldr	r2, [pc, #172]	; (8002128 <TIM_Base_SetConfig+0x14c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_Base_SetConfig+0xaa>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a26      	ldr	r2, [pc, #152]	; (800211c <TIM_Base_SetConfig+0x140>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d108      	bne.n	8002098 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a12      	ldr	r2, [pc, #72]	; (8002108 <TIM_Base_SetConfig+0x12c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d013      	beq.n	80020ec <TIM_Base_SetConfig+0x110>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a14      	ldr	r2, [pc, #80]	; (8002118 <TIM_Base_SetConfig+0x13c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00f      	beq.n	80020ec <TIM_Base_SetConfig+0x110>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a14      	ldr	r2, [pc, #80]	; (8002120 <TIM_Base_SetConfig+0x144>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00b      	beq.n	80020ec <TIM_Base_SetConfig+0x110>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	4a13      	ldr	r2, [pc, #76]	; (8002124 <TIM_Base_SetConfig+0x148>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d007      	beq.n	80020ec <TIM_Base_SetConfig+0x110>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a12      	ldr	r2, [pc, #72]	; (8002128 <TIM_Base_SetConfig+0x14c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d003      	beq.n	80020ec <TIM_Base_SetConfig+0x110>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a0d      	ldr	r2, [pc, #52]	; (800211c <TIM_Base_SetConfig+0x140>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d103      	bne.n	80020f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	615a      	str	r2, [r3, #20]
}
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40012c00 	.word	0x40012c00
 800210c:	40000400 	.word	0x40000400
 8002110:	40000800 	.word	0x40000800
 8002114:	40000c00 	.word	0x40000c00
 8002118:	40013400 	.word	0x40013400
 800211c:	40015000 	.word	0x40015000
 8002120:	40014000 	.word	0x40014000
 8002124:	40014400 	.word	0x40014400
 8002128:	40014800 	.word	0x40014800

0800212c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	4603      	mov	r3, r0
 80021c0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80021c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021ca:	2b84      	cmp	r3, #132	; 0x84
 80021cc:	d005      	beq.n	80021da <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80021ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4413      	add	r3, r2
 80021d6:	3303      	adds	r3, #3
 80021d8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80021da:	68fb      	ldr	r3, [r7, #12]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021ee:	f3ef 8305 	mrs	r3, IPSR
 80021f2:	607b      	str	r3, [r7, #4]
  return(result);
 80021f4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	bf14      	ite	ne
 80021fa:	2301      	movne	r3, #1
 80021fc:	2300      	moveq	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002210:	f001 f856 	bl	80032c0 <vTaskStartScheduler>
  
  return osOK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	bd80      	pop	{r7, pc}

0800221a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800221a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221c:	b089      	sub	sp, #36	; 0x24
 800221e:	af04      	add	r7, sp, #16
 8002220:	6078      	str	r0, [r7, #4]
 8002222:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685c      	ldr	r4, [r3, #4]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681d      	ldr	r5, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	691e      	ldr	r6, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff ffbe 	bl	80021b8 <makeFreeRtosPriority>
 800223c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002246:	9202      	str	r2, [sp, #8]
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	9100      	str	r1, [sp, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4632      	mov	r2, r6
 8002250:	4629      	mov	r1, r5
 8002252:	4620      	mov	r0, r4
 8002254:	f000 fe73 	bl	8002f3e <xTaskCreateStatic>
 8002258:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002264 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b085      	sub	sp, #20
 8002268:	af02      	add	r7, sp, #8
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68dc      	ldr	r4, [r3, #12]
 800227e:	2300      	movs	r3, #0
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	4623      	mov	r3, r4
 8002284:	f000 f9d6 	bl	8002634 <xQueueGenericCreateStatic>
 8002288:	4603      	mov	r3, r0
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bd90      	pop	{r4, r7, pc}
	...

08002294 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <osMessagePut+0x1e>
    ticks = 1;
 80022ae:	2301      	movs	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80022b2:	f7ff ff99 	bl	80021e8 <inHandlerMode>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d018      	beq.n	80022ee <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80022bc:	f107 0210 	add.w	r2, r7, #16
 80022c0:	f107 0108 	add.w	r1, r7, #8
 80022c4:	2300      	movs	r3, #0
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fb3c 	bl	8002944 <xQueueGenericSendFromISR>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d001      	beq.n	80022d6 <osMessagePut+0x42>
      return osErrorOS;
 80022d2:	23ff      	movs	r3, #255	; 0xff
 80022d4:	e018      	b.n	8002308 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d014      	beq.n	8002306 <osMessagePut+0x72>
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <osMessagePut+0x7c>)
 80022de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022e2:	601a      	str	r2, [r3, #0]
 80022e4:	f3bf 8f4f 	dsb	sy
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	e00b      	b.n	8002306 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80022ee:	f107 0108 	add.w	r1, r7, #8
 80022f2:	2300      	movs	r3, #0
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fa2a 	bl	8002750 <xQueueGenericSend>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d001      	beq.n	8002306 <osMessagePut+0x72>
      return osErrorOS;
 8002302:	23ff      	movs	r3, #255	; 0xff
 8002304:	e000      	b.n	8002308 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	e000ed04 	.word	0xe000ed04

08002314 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b08b      	sub	sp, #44	; 0x2c
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10a      	bne.n	8002344 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800232e:	2380      	movs	r3, #128	; 0x80
 8002330:	617b      	str	r3, [r7, #20]
    return event;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	461c      	mov	r4, r3
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800233e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002342:	e054      	b.n	80023ee <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002344:	2300      	movs	r3, #0
 8002346:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002352:	d103      	bne.n	800235c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002358:	627b      	str	r3, [r7, #36]	; 0x24
 800235a:	e009      	b.n	8002370 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <osMessageGet+0x5c>
      ticks = 1;
 800236c:	2301      	movs	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002370:	f7ff ff3a 	bl	80021e8 <inHandlerMode>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01c      	beq.n	80023b4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800237a:	f107 0220 	add.w	r2, r7, #32
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	3304      	adds	r3, #4
 8002384:	4619      	mov	r1, r3
 8002386:	68b8      	ldr	r0, [r7, #8]
 8002388:	f000 fc4c 	bl	8002c24 <xQueueReceiveFromISR>
 800238c:	4603      	mov	r3, r0
 800238e:	2b01      	cmp	r3, #1
 8002390:	d102      	bne.n	8002398 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002392:	2310      	movs	r3, #16
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e001      	b.n	800239c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01d      	beq.n	80023de <osMessageGet+0xca>
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <osMessageGet+0xe4>)
 80023a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023a8:	601a      	str	r2, [r3, #0]
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	f3bf 8f6f 	isb	sy
 80023b2:	e014      	b.n	80023de <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	3304      	adds	r3, #4
 80023ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023bc:	4619      	mov	r1, r3
 80023be:	68b8      	ldr	r0, [r7, #8]
 80023c0:	f000 fb54 	bl	8002a6c <xQueueReceive>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d102      	bne.n	80023d0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80023ca:	2310      	movs	r3, #16
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	e006      	b.n	80023de <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <osMessageGet+0xc6>
 80023d6:	2300      	movs	r3, #0
 80023d8:	e000      	b.n	80023dc <osMessageGet+0xc8>
 80023da:	2340      	movs	r3, #64	; 0x40
 80023dc:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	461c      	mov	r4, r3
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80023ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	372c      	adds	r7, #44	; 0x2c
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}
 80023f6:	bf00      	nop
 80023f8:	e000ed04 	.word	0xe000ed04

080023fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f103 0208 	add.w	r2, r3, #8
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002414:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f103 0208 	add.w	r2, r3, #8
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f103 0208 	add.w	r2, r3, #8
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	601a      	str	r2, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	3714      	adds	r7, #20
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b4:	d103      	bne.n	80024be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e00c      	b.n	80024d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3308      	adds	r3, #8
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	e002      	b.n	80024cc <vListInsert+0x2e>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d2f6      	bcs.n	80024c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	683a      	ldr	r2, [r7, #0]
 80024e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	601a      	str	r2, [r3, #0]
}
 8002504:	bf00      	nop
 8002506:	3714      	adds	r7, #20
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6892      	ldr	r2, [r2, #8]
 8002526:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6852      	ldr	r2, [r2, #4]
 8002530:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	429a      	cmp	r2, r3
 800253a:	d103      	bne.n	8002544 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	1e5a      	subs	r2, r3, #1
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d109      	bne.n	800258c <xQueueGenericReset+0x28>
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	e7fe      	b.n	800258a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800258c:	f001 fca6 	bl	8003edc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002598:	68f9      	ldr	r1, [r7, #12]
 800259a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800259c:	fb01 f303 	mul.w	r3, r1, r3
 80025a0:	441a      	add	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025bc:	3b01      	subs	r3, #1
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025c2:	fb01 f303 	mul.w	r3, r1, r3
 80025c6:	441a      	add	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	22ff      	movs	r2, #255	; 0xff
 80025d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	22ff      	movs	r2, #255	; 0xff
 80025d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d114      	bne.n	800260c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d01a      	beq.n	8002620 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	3310      	adds	r3, #16
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 f8b4 	bl	800375c <xTaskRemoveFromEventList>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d012      	beq.n	8002620 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <xQueueGenericReset+0xcc>)
 80025fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	f3bf 8f4f 	dsb	sy
 8002606:	f3bf 8f6f 	isb	sy
 800260a:	e009      	b.n	8002620 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	3310      	adds	r3, #16
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fef3 	bl	80023fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3324      	adds	r3, #36	; 0x24
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff feee 	bl	80023fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002620:	f001 fc8a 	bl	8003f38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002624:	2301      	movs	r3, #1
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000ed04 	.word	0xe000ed04

08002634 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08e      	sub	sp, #56	; 0x38
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
 8002640:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d109      	bne.n	800265c <xQueueGenericCreateStatic+0x28>
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
 800265a:	e7fe      	b.n	800265a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <xQueueGenericCreateStatic+0x42>
 8002662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
 8002674:	e7fe      	b.n	8002674 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d002      	beq.n	8002682 <xQueueGenericCreateStatic+0x4e>
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <xQueueGenericCreateStatic+0x52>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <xQueueGenericCreateStatic+0x54>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <xQueueGenericCreateStatic+0x6c>
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	623b      	str	r3, [r7, #32]
 800269e:	e7fe      	b.n	800269e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <xQueueGenericCreateStatic+0x78>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <xQueueGenericCreateStatic+0x7c>
 80026ac:	2301      	movs	r3, #1
 80026ae:	e000      	b.n	80026b2 <xQueueGenericCreateStatic+0x7e>
 80026b0:	2300      	movs	r3, #0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d109      	bne.n	80026ca <xQueueGenericCreateStatic+0x96>
 80026b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	e7fe      	b.n	80026c8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80026ca:	2348      	movs	r3, #72	; 0x48
 80026cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b48      	cmp	r3, #72	; 0x48
 80026d2:	d009      	beq.n	80026e8 <xQueueGenericCreateStatic+0xb4>
 80026d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d8:	f383 8811 	msr	BASEPRI, r3
 80026dc:	f3bf 8f6f 	isb	sy
 80026e0:	f3bf 8f4f 	dsb	sy
 80026e4:	61bb      	str	r3, [r7, #24]
 80026e6:	e7fe      	b.n	80026e6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80026e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80026ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d009      	beq.n	8002708 <xQueueGenericCreateStatic+0xd4>
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026f4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80026f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	4613      	mov	r3, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 f805 	bl	8002712 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800270a:	4618      	mov	r0, r3
 800270c:	3730      	adds	r7, #48	; 0x30
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
 800271e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d103      	bne.n	800272e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e002      	b.n	8002734 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002740:	2101      	movs	r1, #1
 8002742:	69b8      	ldr	r0, [r7, #24]
 8002744:	f7ff ff0e 	bl	8002564 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002748:	bf00      	nop
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08e      	sub	sp, #56	; 0x38
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
 800275c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800275e:	2300      	movs	r3, #0
 8002760:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002768:	2b00      	cmp	r3, #0
 800276a:	d109      	bne.n	8002780 <xQueueGenericSend+0x30>
 800276c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002770:	f383 8811 	msr	BASEPRI, r3
 8002774:	f3bf 8f6f 	isb	sy
 8002778:	f3bf 8f4f 	dsb	sy
 800277c:	62bb      	str	r3, [r7, #40]	; 0x28
 800277e:	e7fe      	b.n	800277e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d103      	bne.n	800278e <xQueueGenericSend+0x3e>
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <xQueueGenericSend+0x42>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <xQueueGenericSend+0x44>
 8002792:	2300      	movs	r3, #0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d109      	bne.n	80027ac <xQueueGenericSend+0x5c>
 8002798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	e7fe      	b.n	80027aa <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d103      	bne.n	80027ba <xQueueGenericSend+0x6a>
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <xQueueGenericSend+0x6e>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <xQueueGenericSend+0x70>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d109      	bne.n	80027d8 <xQueueGenericSend+0x88>
 80027c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c8:	f383 8811 	msr	BASEPRI, r3
 80027cc:	f3bf 8f6f 	isb	sy
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	623b      	str	r3, [r7, #32]
 80027d6:	e7fe      	b.n	80027d6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027d8:	f001 f952 	bl	8003a80 <xTaskGetSchedulerState>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <xQueueGenericSend+0x98>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <xQueueGenericSend+0x9c>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <xQueueGenericSend+0x9e>
 80027ec:	2300      	movs	r3, #0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <xQueueGenericSend+0xb6>
 80027f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	e7fe      	b.n	8002804 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002806:	f001 fb69 	bl	8003edc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800280a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800280e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	429a      	cmp	r2, r3
 8002814:	d302      	bcc.n	800281c <xQueueGenericSend+0xcc>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b02      	cmp	r3, #2
 800281a:	d129      	bne.n	8002870 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	68b9      	ldr	r1, [r7, #8]
 8002820:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002822:	f000 fa7c 	bl	8002d1e <prvCopyDataToQueue>
 8002826:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282c:	2b00      	cmp	r3, #0
 800282e:	d010      	beq.n	8002852 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002832:	3324      	adds	r3, #36	; 0x24
 8002834:	4618      	mov	r0, r3
 8002836:	f000 ff91 	bl	800375c <xTaskRemoveFromEventList>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d013      	beq.n	8002868 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002840:	4b3f      	ldr	r3, [pc, #252]	; (8002940 <xQueueGenericSend+0x1f0>)
 8002842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	e00a      	b.n	8002868 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <xQueueGenericSend+0x1f0>)
 800285a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	f3bf 8f4f 	dsb	sy
 8002864:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002868:	f001 fb66 	bl	8003f38 <vPortExitCritical>
				return pdPASS;
 800286c:	2301      	movs	r3, #1
 800286e:	e063      	b.n	8002938 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002876:	f001 fb5f 	bl	8003f38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800287a:	2300      	movs	r3, #0
 800287c:	e05c      	b.n	8002938 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800287e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002880:	2b00      	cmp	r3, #0
 8002882:	d106      	bne.n	8002892 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4618      	mov	r0, r3
 800288a:	f000 ffc9 	bl	8003820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800288e:	2301      	movs	r3, #1
 8002890:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002892:	f001 fb51 	bl	8003f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002896:	f000 fd71 	bl	800337c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800289a:	f001 fb1f 	bl	8003edc <vPortEnterCritical>
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028a4:	b25b      	sxtb	r3, r3
 80028a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028aa:	d103      	bne.n	80028b4 <xQueueGenericSend+0x164>
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ba:	b25b      	sxtb	r3, r3
 80028bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028c0:	d103      	bne.n	80028ca <xQueueGenericSend+0x17a>
 80028c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028ca:	f001 fb35 	bl	8003f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028ce:	1d3a      	adds	r2, r7, #4
 80028d0:	f107 0314 	add.w	r3, r7, #20
 80028d4:	4611      	mov	r1, r2
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 ffb8 	bl	800384c <xTaskCheckForTimeOut>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d124      	bne.n	800292c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80028e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028e4:	f000 fb13 	bl	8002f0e <prvIsQueueFull>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d018      	beq.n	8002920 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80028ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f0:	3310      	adds	r3, #16
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	4611      	mov	r1, r2
 80028f6:	4618      	mov	r0, r3
 80028f8:	f000 ff0c 	bl	8003714 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80028fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028fe:	f000 fa9e 	bl	8002e3e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002902:	f000 fd49 	bl	8003398 <xTaskResumeAll>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	f47f af7c 	bne.w	8002806 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800290e:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <xQueueGenericSend+0x1f0>)
 8002910:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	e772      	b.n	8002806 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002920:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002922:	f000 fa8c 	bl	8002e3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002926:	f000 fd37 	bl	8003398 <xTaskResumeAll>
 800292a:	e76c      	b.n	8002806 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800292c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800292e:	f000 fa86 	bl	8002e3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002932:	f000 fd31 	bl	8003398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002936:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002938:	4618      	mov	r0, r3
 800293a:	3738      	adds	r7, #56	; 0x38
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	e000ed04 	.word	0xe000ed04

08002944 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08e      	sub	sp, #56	; 0x38
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	2b00      	cmp	r3, #0
 800295a:	d109      	bne.n	8002970 <xQueueGenericSendFromISR+0x2c>
 800295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	627b      	str	r3, [r7, #36]	; 0x24
 800296e:	e7fe      	b.n	800296e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d103      	bne.n	800297e <xQueueGenericSendFromISR+0x3a>
 8002976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	d101      	bne.n	8002982 <xQueueGenericSendFromISR+0x3e>
 800297e:	2301      	movs	r3, #1
 8002980:	e000      	b.n	8002984 <xQueueGenericSendFromISR+0x40>
 8002982:	2300      	movs	r3, #0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d109      	bne.n	800299c <xQueueGenericSendFromISR+0x58>
 8002988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298c:	f383 8811 	msr	BASEPRI, r3
 8002990:	f3bf 8f6f 	isb	sy
 8002994:	f3bf 8f4f 	dsb	sy
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	e7fe      	b.n	800299a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d103      	bne.n	80029aa <xQueueGenericSendFromISR+0x66>
 80029a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d101      	bne.n	80029ae <xQueueGenericSendFromISR+0x6a>
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <xQueueGenericSendFromISR+0x6c>
 80029ae:	2300      	movs	r3, #0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <xQueueGenericSendFromISR+0x84>
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	e7fe      	b.n	80029c6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029c8:	f001 fb64 	bl	8004094 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029cc:	f3ef 8211 	mrs	r2, BASEPRI
 80029d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	61ba      	str	r2, [r7, #24]
 80029e2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80029e4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d302      	bcc.n	80029fa <xQueueGenericSendFromISR+0xb6>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d12c      	bne.n	8002a54 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a0a:	f000 f988 	bl	8002d1e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a0e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a16:	d112      	bne.n	8002a3e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d016      	beq.n	8002a4e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	3324      	adds	r3, #36	; 0x24
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 fe99 	bl	800375c <xTaskRemoveFromEventList>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d00e      	beq.n	8002a4e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00b      	beq.n	8002a4e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	e007      	b.n	8002a4e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a42:	3301      	adds	r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	b25a      	sxtb	r2, r3
 8002a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002a52:	e001      	b.n	8002a58 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	637b      	str	r3, [r7, #52]	; 0x34
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3738      	adds	r7, #56	; 0x38
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08c      	sub	sp, #48	; 0x30
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <xQueueReceive+0x2e>
	__asm volatile
 8002a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8a:	f383 8811 	msr	BASEPRI, r3
 8002a8e:	f3bf 8f6f 	isb	sy
 8002a92:	f3bf 8f4f 	dsb	sy
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	e7fe      	b.n	8002a98 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d103      	bne.n	8002aa8 <xQueueReceive+0x3c>
 8002aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d101      	bne.n	8002aac <xQueueReceive+0x40>
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <xQueueReceive+0x42>
 8002aac:	2300      	movs	r3, #0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <xQueueReceive+0x5a>
 8002ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	f3bf 8f6f 	isb	sy
 8002abe:	f3bf 8f4f 	dsb	sy
 8002ac2:	61fb      	str	r3, [r7, #28]
 8002ac4:	e7fe      	b.n	8002ac4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ac6:	f000 ffdb 	bl	8003a80 <xTaskGetSchedulerState>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <xQueueReceive+0x6a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <xQueueReceive+0x6e>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <xQueueReceive+0x70>
 8002ada:	2300      	movs	r3, #0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d109      	bne.n	8002af4 <xQueueReceive+0x88>
 8002ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae4:	f383 8811 	msr	BASEPRI, r3
 8002ae8:	f3bf 8f6f 	isb	sy
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	61bb      	str	r3, [r7, #24]
 8002af2:	e7fe      	b.n	8002af2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002af4:	f001 f9f2 	bl	8003edc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01f      	beq.n	8002b44 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b04:	68b9      	ldr	r1, [r7, #8]
 8002b06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b08:	f000 f973 	bl	8002df2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	1e5a      	subs	r2, r3, #1
 8002b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b12:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00f      	beq.n	8002b3c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1e:	3310      	adds	r3, #16
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fe1b 	bl	800375c <xTaskRemoveFromEventList>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d007      	beq.n	8002b3c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b2c:	4b3c      	ldr	r3, [pc, #240]	; (8002c20 <xQueueReceive+0x1b4>)
 8002b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b3c:	f001 f9fc 	bl	8003f38 <vPortExitCritical>
				return pdPASS;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e069      	b.n	8002c18 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d103      	bne.n	8002b52 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b4a:	f001 f9f5 	bl	8003f38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e062      	b.n	8002c18 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d106      	bne.n	8002b66 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f000 fe5f 	bl	8003820 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b62:	2301      	movs	r3, #1
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b66:	f001 f9e7 	bl	8003f38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b6a:	f000 fc07 	bl	800337c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b6e:	f001 f9b5 	bl	8003edc <vPortEnterCritical>
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b7e:	d103      	bne.n	8002b88 <xQueueReceive+0x11c>
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b94:	d103      	bne.n	8002b9e <xQueueReceive+0x132>
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b9e:	f001 f9cb 	bl	8003f38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ba2:	1d3a      	adds	r2, r7, #4
 8002ba4:	f107 0310 	add.w	r3, r7, #16
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fe4e 	bl	800384c <xTaskCheckForTimeOut>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d123      	bne.n	8002bfe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bb8:	f000 f993 	bl	8002ee2 <prvIsQueueEmpty>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d017      	beq.n	8002bf2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc4:	3324      	adds	r3, #36	; 0x24
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f000 fda2 	bl	8003714 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bd2:	f000 f934 	bl	8002e3e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bd6:	f000 fbdf 	bl	8003398 <xTaskResumeAll>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d189      	bne.n	8002af4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002be0:	4b0f      	ldr	r3, [pc, #60]	; (8002c20 <xQueueReceive+0x1b4>)
 8002be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	e780      	b.n	8002af4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bf4:	f000 f923 	bl	8002e3e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002bf8:	f000 fbce 	bl	8003398 <xTaskResumeAll>
 8002bfc:	e77a      	b.n	8002af4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c00:	f000 f91d 	bl	8002e3e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c04:	f000 fbc8 	bl	8003398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c0a:	f000 f96a 	bl	8002ee2 <prvIsQueueEmpty>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	f43f af6f 	beq.w	8002af4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c16:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3730      	adds	r7, #48	; 0x30
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	e000ed04 	.word	0xe000ed04

08002c24 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08e      	sub	sp, #56	; 0x38
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <xQueueReceiveFromISR+0x2a>
 8002c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c3e:	f383 8811 	msr	BASEPRI, r3
 8002c42:	f3bf 8f6f 	isb	sy
 8002c46:	f3bf 8f4f 	dsb	sy
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	e7fe      	b.n	8002c4c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d103      	bne.n	8002c5c <xQueueReceiveFromISR+0x38>
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d101      	bne.n	8002c60 <xQueueReceiveFromISR+0x3c>
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e000      	b.n	8002c62 <xQueueReceiveFromISR+0x3e>
 8002c60:	2300      	movs	r3, #0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <xQueueReceiveFromISR+0x56>
 8002c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6a:	f383 8811 	msr	BASEPRI, r3
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	e7fe      	b.n	8002c78 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c7a:	f001 fa0b 	bl	8004094 <vPortValidateInterruptPriority>
	__asm volatile
 8002c7e:	f3ef 8211 	mrs	r2, BASEPRI
 8002c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c86:	f383 8811 	msr	BASEPRI, r3
 8002c8a:	f3bf 8f6f 	isb	sy
 8002c8e:	f3bf 8f4f 	dsb	sy
 8002c92:	61ba      	str	r2, [r7, #24]
 8002c94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002c96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d02f      	beq.n	8002d06 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cb4:	f000 f89d 	bl	8002df2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cba:	1e5a      	subs	r2, r3, #1
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002cc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cc8:	d112      	bne.n	8002cf0 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d016      	beq.n	8002d00 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd4:	3310      	adds	r3, #16
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 fd40 	bl	800375c <xTaskRemoveFromEventList>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00e      	beq.n	8002d00 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00b      	beq.n	8002d00 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e007      	b.n	8002d00 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	b25a      	sxtb	r2, r3
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002d00:	2301      	movs	r3, #1
 8002d02:	637b      	str	r3, [r7, #52]	; 0x34
 8002d04:	e001      	b.n	8002d0a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8002d06:	2300      	movs	r3, #0
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
 8002d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3738      	adds	r7, #56	; 0x38
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b086      	sub	sp, #24
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d10d      	bne.n	8002d58 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d14d      	bne.n	8002de0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f000 feb7 	bl	8003abc <xTaskPriorityDisinherit>
 8002d4e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
 8002d56:	e043      	b.n	8002de0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d119      	bne.n	8002d92 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	6858      	ldr	r0, [r3, #4]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	461a      	mov	r2, r3
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	f001 f9f5 	bl	8004158 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	441a      	add	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d32b      	bcc.n	8002de0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	e026      	b.n	8002de0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	68d8      	ldr	r0, [r3, #12]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	f001 f9db 	bl	8004158 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	425b      	negs	r3, r3
 8002dac:	441a      	add	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d207      	bcs.n	8002dce <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689a      	ldr	r2, [r3, #8]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	425b      	negs	r3, r3
 8002dc8:	441a      	add	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d105      	bne.n	8002de0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1c5a      	adds	r2, r3, #1
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002de8:	697b      	ldr	r3, [r7, #20]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
 8002dfa:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d018      	beq.n	8002e36 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68da      	ldr	r2, [r3, #12]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	441a      	add	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d303      	bcc.n	8002e26 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68d9      	ldr	r1, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	461a      	mov	r2, r3
 8002e30:	6838      	ldr	r0, [r7, #0]
 8002e32:	f001 f991 	bl	8004158 <memcpy>
	}
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b084      	sub	sp, #16
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e46:	f001 f849 	bl	8003edc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e50:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e52:	e011      	b.n	8002e78 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d012      	beq.n	8002e82 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3324      	adds	r3, #36	; 0x24
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fc7b 	bl	800375c <xTaskRemoveFromEventList>
 8002e66:	4603      	mov	r3, r0
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e6c:	f000 fd4e 	bl	800390c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dce9      	bgt.n	8002e54 <prvUnlockQueue+0x16>
 8002e80:	e000      	b.n	8002e84 <prvUnlockQueue+0x46>
					break;
 8002e82:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	22ff      	movs	r2, #255	; 0xff
 8002e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e8c:	f001 f854 	bl	8003f38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e90:	f001 f824 	bl	8003edc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e9a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e9c:	e011      	b.n	8002ec2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d012      	beq.n	8002ecc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3310      	adds	r3, #16
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fc56 	bl	800375c <xTaskRemoveFromEventList>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002eb6:	f000 fd29 	bl	800390c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002eba:	7bbb      	ldrb	r3, [r7, #14]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ec2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	dce9      	bgt.n	8002e9e <prvUnlockQueue+0x60>
 8002eca:	e000      	b.n	8002ece <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ecc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	22ff      	movs	r2, #255	; 0xff
 8002ed2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ed6:	f001 f82f 	bl	8003f38 <vPortExitCritical>
}
 8002eda:	bf00      	nop
 8002edc:	3710      	adds	r7, #16
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b084      	sub	sp, #16
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002eea:	f000 fff7 	bl	8003edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d102      	bne.n	8002efc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	e001      	b.n	8002f00 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002efc:	2300      	movs	r3, #0
 8002efe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f00:	f001 f81a 	bl	8003f38 <vPortExitCritical>

	return xReturn;
 8002f04:	68fb      	ldr	r3, [r7, #12]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b084      	sub	sp, #16
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f16:	f000 ffe1 	bl	8003edc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d102      	bne.n	8002f2c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f26:	2301      	movs	r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	e001      	b.n	8002f30 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f30:	f001 f802 	bl	8003f38 <vPortExitCritical>

	return xReturn;
 8002f34:	68fb      	ldr	r3, [r7, #12]
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3710      	adds	r7, #16
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}

08002f3e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b08e      	sub	sp, #56	; 0x38
 8002f42:	af04      	add	r7, sp, #16
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <xTaskCreateStatic+0x28>
	__asm volatile
 8002f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f56:	f383 8811 	msr	BASEPRI, r3
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	f3bf 8f4f 	dsb	sy
 8002f62:	623b      	str	r3, [r7, #32]
 8002f64:	e7fe      	b.n	8002f64 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <xTaskCreateStatic+0x42>
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e7fe      	b.n	8002f7e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002f80:	2354      	movs	r3, #84	; 0x54
 8002f82:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2b54      	cmp	r3, #84	; 0x54
 8002f88:	d009      	beq.n	8002f9e <xTaskCreateStatic+0x60>
 8002f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8e:	f383 8811 	msr	BASEPRI, r3
 8002f92:	f3bf 8f6f 	isb	sy
 8002f96:	f3bf 8f4f 	dsb	sy
 8002f9a:	61bb      	str	r3, [r7, #24]
 8002f9c:	e7fe      	b.n	8002f9c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d01a      	beq.n	8002fdc <xTaskCreateStatic+0x9e>
 8002fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d017      	beq.n	8002fdc <xTaskCreateStatic+0x9e>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fb4:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	9303      	str	r3, [sp, #12]
 8002fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fbc:	9302      	str	r3, [sp, #8]
 8002fbe:	f107 0314 	add.w	r3, r7, #20
 8002fc2:	9301      	str	r3, [sp, #4]
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 f80b 	bl	8002fea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002fd6:	f000 f88f 	bl	80030f8 <prvAddNewTaskToReadyList>
 8002fda:	e001      	b.n	8002fe0 <xTaskCreateStatic+0xa2>
		}
		else
		{
			xReturn = NULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002fe0:	697b      	ldr	r3, [r7, #20]
	}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3728      	adds	r7, #40	; 0x28
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b088      	sub	sp, #32
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	607a      	str	r2, [r7, #4]
 8002ff6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003002:	3b01      	subs	r3, #1
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f023 0307 	bic.w	r3, r3, #7
 8003010:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <prvInitialiseNewTask+0x46>
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	617b      	str	r3, [r7, #20]
 800302e:	e7fe      	b.n	800302e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d01f      	beq.n	8003076 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003036:	2300      	movs	r3, #0
 8003038:	61fb      	str	r3, [r7, #28]
 800303a:	e012      	b.n	8003062 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	4413      	add	r3, r2
 8003042:	7819      	ldrb	r1, [r3, #0]
 8003044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	4413      	add	r3, r2
 800304a:	3334      	adds	r3, #52	; 0x34
 800304c:	460a      	mov	r2, r1
 800304e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d006      	beq.n	800306a <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	3301      	adds	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d9e9      	bls.n	800303c <prvInitialiseNewTask+0x52>
 8003068:	e000      	b.n	800306c <prvInitialiseNewTask+0x82>
			{
				break;
 800306a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003074:	e003      	b.n	800307e <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003078:	2200      	movs	r2, #0
 800307a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800307e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003080:	2b06      	cmp	r3, #6
 8003082:	d901      	bls.n	8003088 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003084:	2306      	movs	r3, #6
 8003086:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800308c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003092:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	2200      	movs	r2, #0
 8003098:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	3304      	adds	r3, #4
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff f9cc 	bl	800243c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	3318      	adds	r3, #24
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f9c7 	bl	800243c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	f1c3 0207 	rsb	r2, r3, #7
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c6:	2200      	movs	r2, #0
 80030c8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	68f9      	ldr	r1, [r7, #12]
 80030d6:	69b8      	ldr	r0, [r7, #24]
 80030d8:	f000 fdda 	bl	8003c90 <pxPortInitialiseStack>
 80030dc:	4602      	mov	r2, r0
 80030de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80030e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80030ee:	bf00      	nop
 80030f0:	3720      	adds	r7, #32
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003100:	f000 feec 	bl	8003edc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003104:	4b2a      	ldr	r3, [pc, #168]	; (80031b0 <prvAddNewTaskToReadyList+0xb8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <prvAddNewTaskToReadyList+0xb8>)
 800310c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800310e:	4b29      	ldr	r3, [pc, #164]	; (80031b4 <prvAddNewTaskToReadyList+0xbc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003116:	4a27      	ldr	r2, [pc, #156]	; (80031b4 <prvAddNewTaskToReadyList+0xbc>)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800311c:	4b24      	ldr	r3, [pc, #144]	; (80031b0 <prvAddNewTaskToReadyList+0xb8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d110      	bne.n	8003146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003124:	f000 fc16 	bl	8003954 <prvInitialiseTaskLists>
 8003128:	e00d      	b.n	8003146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800312a:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <prvAddNewTaskToReadyList+0xc0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003132:	4b20      	ldr	r3, [pc, #128]	; (80031b4 <prvAddNewTaskToReadyList+0xbc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	429a      	cmp	r2, r3
 800313e:	d802      	bhi.n	8003146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003140:	4a1c      	ldr	r2, [pc, #112]	; (80031b4 <prvAddNewTaskToReadyList+0xbc>)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <prvAddNewTaskToReadyList+0xc4>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3301      	adds	r3, #1
 800314c:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <prvAddNewTaskToReadyList+0xc4>)
 800314e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003154:	2201      	movs	r2, #1
 8003156:	409a      	lsls	r2, r3
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <prvAddNewTaskToReadyList+0xc8>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4313      	orrs	r3, r2
 800315e:	4a18      	ldr	r2, [pc, #96]	; (80031c0 <prvAddNewTaskToReadyList+0xc8>)
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4a15      	ldr	r2, [pc, #84]	; (80031c4 <prvAddNewTaskToReadyList+0xcc>)
 8003170:	441a      	add	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3304      	adds	r3, #4
 8003176:	4619      	mov	r1, r3
 8003178:	4610      	mov	r0, r2
 800317a:	f7ff f96c 	bl	8002456 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800317e:	f000 fedb 	bl	8003f38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003182:	4b0d      	ldr	r3, [pc, #52]	; (80031b8 <prvAddNewTaskToReadyList+0xc0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00e      	beq.n	80031a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800318a:	4b0a      	ldr	r3, [pc, #40]	; (80031b4 <prvAddNewTaskToReadyList+0xbc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	429a      	cmp	r2, r3
 8003196:	d207      	bcs.n	80031a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <prvAddNewTaskToReadyList+0xd0>)
 800319a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	20000384 	.word	0x20000384
 80031b4:	20000284 	.word	0x20000284
 80031b8:	20000390 	.word	0x20000390
 80031bc:	200003a0 	.word	0x200003a0
 80031c0:	2000038c 	.word	0x2000038c
 80031c4:	20000288 	.word	0x20000288
 80031c8:	e000ed04 	.word	0xe000ed04

080031cc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08a      	sub	sp, #40	; 0x28
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80031d6:	2300      	movs	r3, #0
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d109      	bne.n	80031f4 <vTaskDelayUntil+0x28>
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	e7fe      	b.n	80031f2 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d109      	bne.n	800320e <vTaskDelayUntil+0x42>
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	e7fe      	b.n	800320c <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 800320e:	4b29      	ldr	r3, [pc, #164]	; (80032b4 <vTaskDelayUntil+0xe8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <vTaskDelayUntil+0x5e>
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e7fe      	b.n	8003228 <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 800322a:	f000 f8a7 	bl	800337c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800322e:	4b22      	ldr	r3, [pc, #136]	; (80032b8 <vTaskDelayUntil+0xec>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	4413      	add	r3, r2
 800323c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6a3a      	ldr	r2, [r7, #32]
 8003244:	429a      	cmp	r2, r3
 8003246:	d20b      	bcs.n	8003260 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	69fa      	ldr	r2, [r7, #28]
 800324e:	429a      	cmp	r2, r3
 8003250:	d211      	bcs.n	8003276 <vTaskDelayUntil+0xaa>
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	6a3b      	ldr	r3, [r7, #32]
 8003256:	429a      	cmp	r2, r3
 8003258:	d90d      	bls.n	8003276 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 800325a:	2301      	movs	r3, #1
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
 800325e:	e00a      	b.n	8003276 <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	429a      	cmp	r2, r3
 8003268:	d303      	bcc.n	8003272 <vTaskDelayUntil+0xa6>
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	429a      	cmp	r2, r3
 8003270:	d901      	bls.n	8003276 <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8003272:	2301      	movs	r3, #1
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	2b00      	cmp	r3, #0
 8003280:	d006      	beq.n	8003290 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003282:	69fa      	ldr	r2, [r7, #28]
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fc9a 	bl	8003bc4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003290:	f000 f882 	bl	8003398 <xTaskResumeAll>
 8003294:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d107      	bne.n	80032ac <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 800329c:	4b07      	ldr	r3, [pc, #28]	; (80032bc <vTaskDelayUntil+0xf0>)
 800329e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f3bf 8f4f 	dsb	sy
 80032a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80032ac:	bf00      	nop
 80032ae:	3728      	adds	r7, #40	; 0x28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	200003ac 	.word	0x200003ac
 80032b8:	20000388 	.word	0x20000388
 80032bc:	e000ed04 	.word	0xe000ed04

080032c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08a      	sub	sp, #40	; 0x28
 80032c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032ce:	463a      	mov	r2, r7
 80032d0:	1d39      	adds	r1, r7, #4
 80032d2:	f107 0308 	add.w	r3, r7, #8
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fc ffa2 	bl	8000220 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032dc:	6839      	ldr	r1, [r7, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68ba      	ldr	r2, [r7, #8]
 80032e2:	9202      	str	r2, [sp, #8]
 80032e4:	9301      	str	r3, [sp, #4]
 80032e6:	2300      	movs	r3, #0
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	2300      	movs	r3, #0
 80032ec:	460a      	mov	r2, r1
 80032ee:	491d      	ldr	r1, [pc, #116]	; (8003364 <vTaskStartScheduler+0xa4>)
 80032f0:	481d      	ldr	r0, [pc, #116]	; (8003368 <vTaskStartScheduler+0xa8>)
 80032f2:	f7ff fe24 	bl	8002f3e <xTaskCreateStatic>
 80032f6:	4602      	mov	r2, r0
 80032f8:	4b1c      	ldr	r3, [pc, #112]	; (800336c <vTaskStartScheduler+0xac>)
 80032fa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80032fc:	4b1b      	ldr	r3, [pc, #108]	; (800336c <vTaskStartScheduler+0xac>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003304:	2301      	movs	r3, #1
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	e001      	b.n	800330e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d115      	bne.n	8003340 <vTaskStartScheduler+0x80>
 8003314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003318:	f383 8811 	msr	BASEPRI, r3
 800331c:	f3bf 8f6f 	isb	sy
 8003320:	f3bf 8f4f 	dsb	sy
 8003324:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <vTaskStartScheduler+0xb0>)
 8003328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800332c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <vTaskStartScheduler+0xb4>)
 8003330:	2201      	movs	r2, #1
 8003332:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003334:	4b10      	ldr	r3, [pc, #64]	; (8003378 <vTaskStartScheduler+0xb8>)
 8003336:	2200      	movs	r2, #0
 8003338:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800333a:	f000 fd31 	bl	8003da0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800333e:	e00d      	b.n	800335c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003346:	d109      	bne.n	800335c <vTaskStartScheduler+0x9c>
 8003348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800334c:	f383 8811 	msr	BASEPRI, r3
 8003350:	f3bf 8f6f 	isb	sy
 8003354:	f3bf 8f4f 	dsb	sy
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	e7fe      	b.n	800335a <vTaskStartScheduler+0x9a>
}
 800335c:	bf00      	nop
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	080041f0 	.word	0x080041f0
 8003368:	08003925 	.word	0x08003925
 800336c:	200003a8 	.word	0x200003a8
 8003370:	200003a4 	.word	0x200003a4
 8003374:	20000390 	.word	0x20000390
 8003378:	20000388 	.word	0x20000388

0800337c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003380:	4b04      	ldr	r3, [pc, #16]	; (8003394 <vTaskSuspendAll+0x18>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	3301      	adds	r3, #1
 8003386:	4a03      	ldr	r2, [pc, #12]	; (8003394 <vTaskSuspendAll+0x18>)
 8003388:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800338a:	bf00      	nop
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	200003ac 	.word	0x200003ac

08003398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033a2:	2300      	movs	r3, #0
 80033a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033a6:	4b41      	ldr	r3, [pc, #260]	; (80034ac <xTaskResumeAll+0x114>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d109      	bne.n	80033c2 <xTaskResumeAll+0x2a>
 80033ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b2:	f383 8811 	msr	BASEPRI, r3
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	e7fe      	b.n	80033c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033c2:	f000 fd8b 	bl	8003edc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033c6:	4b39      	ldr	r3, [pc, #228]	; (80034ac <xTaskResumeAll+0x114>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	4a37      	ldr	r2, [pc, #220]	; (80034ac <xTaskResumeAll+0x114>)
 80033ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033d0:	4b36      	ldr	r3, [pc, #216]	; (80034ac <xTaskResumeAll+0x114>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d161      	bne.n	800349c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033d8:	4b35      	ldr	r3, [pc, #212]	; (80034b0 <xTaskResumeAll+0x118>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d05d      	beq.n	800349c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033e0:	e02e      	b.n	8003440 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033e2:	4b34      	ldr	r3, [pc, #208]	; (80034b4 <xTaskResumeAll+0x11c>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	3318      	adds	r3, #24
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7ff f88e 	bl	8002510 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	3304      	adds	r3, #4
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff f889 	bl	8002510 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	2201      	movs	r2, #1
 8003404:	409a      	lsls	r2, r3
 8003406:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <xTaskResumeAll+0x120>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4313      	orrs	r3, r2
 800340c:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <xTaskResumeAll+0x120>)
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4a27      	ldr	r2, [pc, #156]	; (80034bc <xTaskResumeAll+0x124>)
 800341e:	441a      	add	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	3304      	adds	r3, #4
 8003424:	4619      	mov	r1, r3
 8003426:	4610      	mov	r0, r2
 8003428:	f7ff f815 	bl	8002456 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	4b23      	ldr	r3, [pc, #140]	; (80034c0 <xTaskResumeAll+0x128>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	429a      	cmp	r2, r3
 8003438:	d302      	bcc.n	8003440 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800343a:	4b22      	ldr	r3, [pc, #136]	; (80034c4 <xTaskResumeAll+0x12c>)
 800343c:	2201      	movs	r2, #1
 800343e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003440:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <xTaskResumeAll+0x11c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1cc      	bne.n	80033e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800344e:	f000 faf7 	bl	8003a40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003452:	4b1d      	ldr	r3, [pc, #116]	; (80034c8 <xTaskResumeAll+0x130>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d010      	beq.n	8003480 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800345e:	f000 f847 	bl	80034f0 <xTaskIncrementTick>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003468:	4b16      	ldr	r3, [pc, #88]	; (80034c4 <xTaskResumeAll+0x12c>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	3b01      	subs	r3, #1
 8003472:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f1      	bne.n	800345e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800347a:	4b13      	ldr	r3, [pc, #76]	; (80034c8 <xTaskResumeAll+0x130>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003480:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <xTaskResumeAll+0x12c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d009      	beq.n	800349c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003488:	2301      	movs	r3, #1
 800348a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <xTaskResumeAll+0x134>)
 800348e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800349c:	f000 fd4c 	bl	8003f38 <vPortExitCritical>

	return xAlreadyYielded;
 80034a0:	68bb      	ldr	r3, [r7, #8]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	200003ac 	.word	0x200003ac
 80034b0:	20000384 	.word	0x20000384
 80034b4:	20000344 	.word	0x20000344
 80034b8:	2000038c 	.word	0x2000038c
 80034bc:	20000288 	.word	0x20000288
 80034c0:	20000284 	.word	0x20000284
 80034c4:	20000398 	.word	0x20000398
 80034c8:	20000394 	.word	0x20000394
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80034d6:	4b05      	ldr	r3, [pc, #20]	; (80034ec <xTaskGetTickCount+0x1c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80034dc:	687b      	ldr	r3, [r7, #4]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	20000388 	.word	0x20000388

080034f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034fa:	4b4e      	ldr	r3, [pc, #312]	; (8003634 <xTaskIncrementTick+0x144>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f040 8087 	bne.w	8003612 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003504:	4b4c      	ldr	r3, [pc, #304]	; (8003638 <xTaskIncrementTick+0x148>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	3301      	adds	r3, #1
 800350a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800350c:	4a4a      	ldr	r2, [pc, #296]	; (8003638 <xTaskIncrementTick+0x148>)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d11f      	bne.n	8003558 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003518:	4b48      	ldr	r3, [pc, #288]	; (800363c <xTaskIncrementTick+0x14c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <xTaskIncrementTick+0x46>
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	e7fe      	b.n	8003534 <xTaskIncrementTick+0x44>
 8003536:	4b41      	ldr	r3, [pc, #260]	; (800363c <xTaskIncrementTick+0x14c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	4b40      	ldr	r3, [pc, #256]	; (8003640 <xTaskIncrementTick+0x150>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a3e      	ldr	r2, [pc, #248]	; (800363c <xTaskIncrementTick+0x14c>)
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	4a3e      	ldr	r2, [pc, #248]	; (8003640 <xTaskIncrementTick+0x150>)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b3e      	ldr	r3, [pc, #248]	; (8003644 <xTaskIncrementTick+0x154>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3301      	adds	r3, #1
 8003550:	4a3c      	ldr	r2, [pc, #240]	; (8003644 <xTaskIncrementTick+0x154>)
 8003552:	6013      	str	r3, [r2, #0]
 8003554:	f000 fa74 	bl	8003a40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003558:	4b3b      	ldr	r3, [pc, #236]	; (8003648 <xTaskIncrementTick+0x158>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	429a      	cmp	r2, r3
 8003560:	d348      	bcc.n	80035f4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003562:	4b36      	ldr	r3, [pc, #216]	; (800363c <xTaskIncrementTick+0x14c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d104      	bne.n	8003576 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356c:	4b36      	ldr	r3, [pc, #216]	; (8003648 <xTaskIncrementTick+0x158>)
 800356e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003572:	601a      	str	r2, [r3, #0]
					break;
 8003574:	e03e      	b.n	80035f4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003576:	4b31      	ldr	r3, [pc, #196]	; (800363c <xTaskIncrementTick+0x14c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d203      	bcs.n	8003596 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800358e:	4a2e      	ldr	r2, [pc, #184]	; (8003648 <xTaskIncrementTick+0x158>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003594:	e02e      	b.n	80035f4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	3304      	adds	r3, #4
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe ffb8 	bl	8002510 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d004      	beq.n	80035b2 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	3318      	adds	r3, #24
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7fe ffaf 	bl	8002510 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b6:	2201      	movs	r2, #1
 80035b8:	409a      	lsls	r2, r3
 80035ba:	4b24      	ldr	r3, [pc, #144]	; (800364c <xTaskIncrementTick+0x15c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4313      	orrs	r3, r2
 80035c0:	4a22      	ldr	r2, [pc, #136]	; (800364c <xTaskIncrementTick+0x15c>)
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4a1f      	ldr	r2, [pc, #124]	; (8003650 <xTaskIncrementTick+0x160>)
 80035d2:	441a      	add	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f7fe ff3b 	bl	8002456 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e4:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <xTaskIncrementTick+0x164>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3b9      	bcc.n	8003562 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80035ee:	2301      	movs	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f2:	e7b6      	b.n	8003562 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035f4:	4b17      	ldr	r3, [pc, #92]	; (8003654 <xTaskIncrementTick+0x164>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035fa:	4915      	ldr	r1, [pc, #84]	; (8003650 <xTaskIncrementTick+0x160>)
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d907      	bls.n	800361c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	e004      	b.n	800361c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <xTaskIncrementTick+0x168>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	4a0f      	ldr	r2, [pc, #60]	; (8003658 <xTaskIncrementTick+0x168>)
 800361a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <xTaskIncrementTick+0x16c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d001      	beq.n	8003628 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003624:	2301      	movs	r3, #1
 8003626:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003628:	697b      	ldr	r3, [r7, #20]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200003ac 	.word	0x200003ac
 8003638:	20000388 	.word	0x20000388
 800363c:	2000033c 	.word	0x2000033c
 8003640:	20000340 	.word	0x20000340
 8003644:	2000039c 	.word	0x2000039c
 8003648:	200003a4 	.word	0x200003a4
 800364c:	2000038c 	.word	0x2000038c
 8003650:	20000288 	.word	0x20000288
 8003654:	20000284 	.word	0x20000284
 8003658:	20000394 	.word	0x20000394
 800365c:	20000398 	.word	0x20000398

08003660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003660:	b480      	push	{r7}
 8003662:	b087      	sub	sp, #28
 8003664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <vTaskSwitchContext+0xa0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800366e:	4b25      	ldr	r3, [pc, #148]	; (8003704 <vTaskSwitchContext+0xa4>)
 8003670:	2201      	movs	r2, #1
 8003672:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003674:	e03e      	b.n	80036f4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003676:	4b23      	ldr	r3, [pc, #140]	; (8003704 <vTaskSwitchContext+0xa4>)
 8003678:	2200      	movs	r2, #0
 800367a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800367c:	4b22      	ldr	r3, [pc, #136]	; (8003708 <vTaskSwitchContext+0xa8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	fab3 f383 	clz	r3, r3
 8003688:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800368a:	7afb      	ldrb	r3, [r7, #11]
 800368c:	f1c3 031f 	rsb	r3, r3, #31
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	491e      	ldr	r1, [pc, #120]	; (800370c <vTaskSwitchContext+0xac>)
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <vTaskSwitchContext+0x5a>
	__asm volatile
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	607b      	str	r3, [r7, #4]
 80036b8:	e7fe      	b.n	80036b8 <vTaskSwitchContext+0x58>
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4a11      	ldr	r2, [pc, #68]	; (800370c <vTaskSwitchContext+0xac>)
 80036c6:	4413      	add	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	605a      	str	r2, [r3, #4]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	3308      	adds	r3, #8
 80036dc:	429a      	cmp	r2, r3
 80036de:	d104      	bne.n	80036ea <vTaskSwitchContext+0x8a>
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	685a      	ldr	r2, [r3, #4]
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	605a      	str	r2, [r3, #4]
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4a07      	ldr	r2, [pc, #28]	; (8003710 <vTaskSwitchContext+0xb0>)
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	200003ac 	.word	0x200003ac
 8003704:	20000398 	.word	0x20000398
 8003708:	2000038c 	.word	0x2000038c
 800370c:	20000288 	.word	0x20000288
 8003710:	20000284 	.word	0x20000284

08003714 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d109      	bne.n	8003738 <vTaskPlaceOnEventList+0x24>
 8003724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	e7fe      	b.n	8003736 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003738:	4b07      	ldr	r3, [pc, #28]	; (8003758 <vTaskPlaceOnEventList+0x44>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3318      	adds	r3, #24
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7fe feac 	bl	800249e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003746:	2101      	movs	r1, #1
 8003748:	6838      	ldr	r0, [r7, #0]
 800374a:	f000 fa3b 	bl	8003bc4 <prvAddCurrentTaskToDelayedList>
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000284 	.word	0x20000284

0800375c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <xTaskRemoveFromEventList+0x2a>
 8003772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	60fb      	str	r3, [r7, #12]
 8003784:	e7fe      	b.n	8003784 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	3318      	adds	r3, #24
 800378a:	4618      	mov	r0, r3
 800378c:	f7fe fec0 	bl	8002510 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003790:	4b1d      	ldr	r3, [pc, #116]	; (8003808 <xTaskRemoveFromEventList+0xac>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d11c      	bne.n	80037d2 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	3304      	adds	r3, #4
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe feb7 	bl	8002510 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a6:	2201      	movs	r2, #1
 80037a8:	409a      	lsls	r2, r3
 80037aa:	4b18      	ldr	r3, [pc, #96]	; (800380c <xTaskRemoveFromEventList+0xb0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	4a16      	ldr	r2, [pc, #88]	; (800380c <xTaskRemoveFromEventList+0xb0>)
 80037b2:	6013      	str	r3, [r2, #0]
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b8:	4613      	mov	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4413      	add	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4a13      	ldr	r2, [pc, #76]	; (8003810 <xTaskRemoveFromEventList+0xb4>)
 80037c2:	441a      	add	r2, r3
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f7fe fe43 	bl	8002456 <vListInsertEnd>
 80037d0:	e005      	b.n	80037de <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	3318      	adds	r3, #24
 80037d6:	4619      	mov	r1, r3
 80037d8:	480e      	ldr	r0, [pc, #56]	; (8003814 <xTaskRemoveFromEventList+0xb8>)
 80037da:	f7fe fe3c 	bl	8002456 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e2:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <xTaskRemoveFromEventList+0xbc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d905      	bls.n	80037f8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80037ec:	2301      	movs	r3, #1
 80037ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80037f0:	4b0a      	ldr	r3, [pc, #40]	; (800381c <xTaskRemoveFromEventList+0xc0>)
 80037f2:	2201      	movs	r2, #1
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	e001      	b.n	80037fc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80037fc:	697b      	ldr	r3, [r7, #20]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3718      	adds	r7, #24
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	200003ac 	.word	0x200003ac
 800380c:	2000038c 	.word	0x2000038c
 8003810:	20000288 	.word	0x20000288
 8003814:	20000344 	.word	0x20000344
 8003818:	20000284 	.word	0x20000284
 800381c:	20000398 	.word	0x20000398

08003820 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003828:	4b06      	ldr	r3, [pc, #24]	; (8003844 <vTaskInternalSetTimeOutState+0x24>)
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <vTaskInternalSetTimeOutState+0x28>)
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	605a      	str	r2, [r3, #4]
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	2000039c 	.word	0x2000039c
 8003848:	20000388 	.word	0x20000388

0800384c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d109      	bne.n	8003870 <xTaskCheckForTimeOut+0x24>
 800385c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003860:	f383 8811 	msr	BASEPRI, r3
 8003864:	f3bf 8f6f 	isb	sy
 8003868:	f3bf 8f4f 	dsb	sy
 800386c:	613b      	str	r3, [r7, #16]
 800386e:	e7fe      	b.n	800386e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d109      	bne.n	800388a <xTaskCheckForTimeOut+0x3e>
 8003876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	e7fe      	b.n	8003888 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800388a:	f000 fb27 	bl	8003edc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800388e:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <xTaskCheckForTimeOut+0xb8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	1ad3      	subs	r3, r2, r3
 800389c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a6:	d102      	bne.n	80038ae <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80038a8:	2300      	movs	r3, #0
 80038aa:	61fb      	str	r3, [r7, #28]
 80038ac:	e023      	b.n	80038f6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4b15      	ldr	r3, [pc, #84]	; (8003908 <xTaskCheckForTimeOut+0xbc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d007      	beq.n	80038ca <xTaskCheckForTimeOut+0x7e>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d302      	bcc.n	80038ca <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80038c4:	2301      	movs	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	e015      	b.n	80038f6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d20b      	bcs.n	80038ec <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	1ad2      	subs	r2, r2, r3
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff9d 	bl	8003820 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
 80038ea:	e004      	b.n	80038f6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80038f2:	2301      	movs	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80038f6:	f000 fb1f 	bl	8003f38 <vPortExitCritical>

	return xReturn;
 80038fa:	69fb      	ldr	r3, [r7, #28]
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	20000388 	.word	0x20000388
 8003908:	2000039c 	.word	0x2000039c

0800390c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <vTaskMissedYield+0x14>)
 8003912:	2201      	movs	r2, #1
 8003914:	601a      	str	r2, [r3, #0]
}
 8003916:	bf00      	nop
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	20000398 	.word	0x20000398

08003924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800392c:	f000 f852 	bl	80039d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003930:	4b06      	ldr	r3, [pc, #24]	; (800394c <prvIdleTask+0x28>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b01      	cmp	r3, #1
 8003936:	d9f9      	bls.n	800392c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003938:	4b05      	ldr	r3, [pc, #20]	; (8003950 <prvIdleTask+0x2c>)
 800393a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003948:	e7f0      	b.n	800392c <prvIdleTask+0x8>
 800394a:	bf00      	nop
 800394c:	20000288 	.word	0x20000288
 8003950:	e000ed04 	.word	0xe000ed04

08003954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	e00c      	b.n	800397a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003960:	687a      	ldr	r2, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4a12      	ldr	r2, [pc, #72]	; (80039b4 <prvInitialiseTaskLists+0x60>)
 800396c:	4413      	add	r3, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe fd44 	bl	80023fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3301      	adds	r3, #1
 8003978:	607b      	str	r3, [r7, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2b06      	cmp	r3, #6
 800397e:	d9ef      	bls.n	8003960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003980:	480d      	ldr	r0, [pc, #52]	; (80039b8 <prvInitialiseTaskLists+0x64>)
 8003982:	f7fe fd3b 	bl	80023fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003986:	480d      	ldr	r0, [pc, #52]	; (80039bc <prvInitialiseTaskLists+0x68>)
 8003988:	f7fe fd38 	bl	80023fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800398c:	480c      	ldr	r0, [pc, #48]	; (80039c0 <prvInitialiseTaskLists+0x6c>)
 800398e:	f7fe fd35 	bl	80023fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003992:	480c      	ldr	r0, [pc, #48]	; (80039c4 <prvInitialiseTaskLists+0x70>)
 8003994:	f7fe fd32 	bl	80023fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003998:	480b      	ldr	r0, [pc, #44]	; (80039c8 <prvInitialiseTaskLists+0x74>)
 800399a:	f7fe fd2f 	bl	80023fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800399e:	4b0b      	ldr	r3, [pc, #44]	; (80039cc <prvInitialiseTaskLists+0x78>)
 80039a0:	4a05      	ldr	r2, [pc, #20]	; (80039b8 <prvInitialiseTaskLists+0x64>)
 80039a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <prvInitialiseTaskLists+0x7c>)
 80039a6:	4a05      	ldr	r2, [pc, #20]	; (80039bc <prvInitialiseTaskLists+0x68>)
 80039a8:	601a      	str	r2, [r3, #0]
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000288 	.word	0x20000288
 80039b8:	20000314 	.word	0x20000314
 80039bc:	20000328 	.word	0x20000328
 80039c0:	20000344 	.word	0x20000344
 80039c4:	20000358 	.word	0x20000358
 80039c8:	20000370 	.word	0x20000370
 80039cc:	2000033c 	.word	0x2000033c
 80039d0:	20000340 	.word	0x20000340

080039d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039da:	e019      	b.n	8003a10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80039dc:	f000 fa7e 	bl	8003edc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <prvCheckTasksWaitingTermination+0x4c>)
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3304      	adds	r3, #4
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7fe fd8f 	bl	8002510 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80039f2:	4b0c      	ldr	r3, [pc, #48]	; (8003a24 <prvCheckTasksWaitingTermination+0x50>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <prvCheckTasksWaitingTermination+0x50>)
 80039fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <prvCheckTasksWaitingTermination+0x54>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	4a09      	ldr	r2, [pc, #36]	; (8003a28 <prvCheckTasksWaitingTermination+0x54>)
 8003a04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a06:	f000 fa97 	bl	8003f38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f80e 	bl	8003a2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a10:	4b05      	ldr	r3, [pc, #20]	; (8003a28 <prvCheckTasksWaitingTermination+0x54>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e1      	bne.n	80039dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20000358 	.word	0x20000358
 8003a24:	20000384 	.word	0x20000384
 8003a28:	2000036c 	.word	0x2000036c

08003a2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a46:	4b0c      	ldr	r3, [pc, #48]	; (8003a78 <prvResetNextTaskUnblockTime+0x38>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d104      	bne.n	8003a5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <prvResetNextTaskUnblockTime+0x3c>)
 8003a52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003a58:	e008      	b.n	8003a6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a5a:	4b07      	ldr	r3, [pc, #28]	; (8003a78 <prvResetNextTaskUnblockTime+0x38>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	4a04      	ldr	r2, [pc, #16]	; (8003a7c <prvResetNextTaskUnblockTime+0x3c>)
 8003a6a:	6013      	str	r3, [r2, #0]
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	2000033c 	.word	0x2000033c
 8003a7c:	200003a4 	.word	0x200003a4

08003a80 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a86:	4b0b      	ldr	r3, [pc, #44]	; (8003ab4 <xTaskGetSchedulerState+0x34>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	e008      	b.n	8003aa6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <xTaskGetSchedulerState+0x38>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d102      	bne.n	8003aa2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	e001      	b.n	8003aa6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003aa6:	687b      	ldr	r3, [r7, #4]
	}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	20000390 	.word	0x20000390
 8003ab8:	200003ac 	.word	0x200003ac

08003abc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d06c      	beq.n	8003bac <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <xTaskPriorityDisinherit+0xfc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d009      	beq.n	8003af0 <xTaskPriorityDisinherit+0x34>
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	60fb      	str	r3, [r7, #12]
 8003aee:	e7fe      	b.n	8003aee <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d109      	bne.n	8003b0c <xTaskPriorityDisinherit+0x50>
 8003af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	60bb      	str	r3, [r7, #8]
 8003b0a:	e7fe      	b.n	8003b0a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	1e5a      	subs	r2, r3, #1
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d044      	beq.n	8003bac <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d140      	bne.n	8003bac <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe fcee 	bl	8002510 <uxListRemove>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d115      	bne.n	8003b66 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3e:	491f      	ldr	r1, [pc, #124]	; (8003bbc <xTaskPriorityDisinherit+0x100>)
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <xTaskPriorityDisinherit+0xaa>
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	2201      	movs	r2, #1
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	4b18      	ldr	r3, [pc, #96]	; (8003bc0 <xTaskPriorityDisinherit+0x104>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4013      	ands	r3, r2
 8003b62:	4a17      	ldr	r2, [pc, #92]	; (8003bc0 <xTaskPriorityDisinherit+0x104>)
 8003b64:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b72:	f1c3 0207 	rsb	r2, r3, #7
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7e:	2201      	movs	r2, #1
 8003b80:	409a      	lsls	r2, r3
 8003b82:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <xTaskPriorityDisinherit+0x104>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	4a0d      	ldr	r2, [pc, #52]	; (8003bc0 <xTaskPriorityDisinherit+0x104>)
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <xTaskPriorityDisinherit+0x100>)
 8003b9a:	441a      	add	r2, r3
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	3304      	adds	r3, #4
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	f7fe fc57 	bl	8002456 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003bac:	697b      	ldr	r3, [r7, #20]
	}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	20000284 	.word	0x20000284
 8003bbc:	20000288 	.word	0x20000288
 8003bc0:	2000038c 	.word	0x2000038c

08003bc4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003bce:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bd4:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	3304      	adds	r3, #4
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fc98 	bl	8002510 <uxListRemove>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d10b      	bne.n	8003bfe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003be6:	4b24      	ldr	r3, [pc, #144]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	2201      	movs	r2, #1
 8003bee:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf2:	43da      	mvns	r2, r3
 8003bf4:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	4a20      	ldr	r2, [pc, #128]	; (8003c7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003bfc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c04:	d10a      	bne.n	8003c1c <prvAddCurrentTaskToDelayedList+0x58>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d007      	beq.n	8003c1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4619      	mov	r1, r3
 8003c14:	481a      	ldr	r0, [pc, #104]	; (8003c80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003c16:	f7fe fc1e 	bl	8002456 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003c1a:	e026      	b.n	8003c6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4413      	add	r3, r2
 8003c22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003c24:	4b14      	ldr	r3, [pc, #80]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d209      	bcs.n	8003c48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4b0f      	ldr	r3, [pc, #60]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f7fe fc2c 	bl	800249e <vListInsert>
}
 8003c46:	e010      	b.n	8003c6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003c48:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4b0a      	ldr	r3, [pc, #40]	; (8003c78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	3304      	adds	r3, #4
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7fe fc22 	bl	800249e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003c5a:	4b0c      	ldr	r3, [pc, #48]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68ba      	ldr	r2, [r7, #8]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d202      	bcs.n	8003c6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c64:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6013      	str	r3, [r2, #0]
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000388 	.word	0x20000388
 8003c78:	20000284 	.word	0x20000284
 8003c7c:	2000038c 	.word	0x2000038c
 8003c80:	20000370 	.word	0x20000370
 8003c84:	20000340 	.word	0x20000340
 8003c88:	2000033c 	.word	0x2000033c
 8003c8c:	200003a4 	.word	0x200003a4

08003c90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3b04      	subs	r3, #4
 8003ca0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ca8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	3b04      	subs	r3, #4
 8003cae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f023 0201 	bic.w	r2, r3, #1
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3b04      	subs	r3, #4
 8003cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003cc0:	4a0c      	ldr	r2, [pc, #48]	; (8003cf4 <pxPortInitialiseStack+0x64>)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3b14      	subs	r3, #20
 8003cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3b04      	subs	r3, #4
 8003cd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f06f 0202 	mvn.w	r2, #2
 8003cde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	3b20      	subs	r3, #32
 8003ce4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr
 8003cf4:	08003cf9 	.word	0x08003cf9

08003cf8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d02:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <prvTaskExitError+0x50>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d0a:	d009      	beq.n	8003d20 <prvTaskExitError+0x28>
 8003d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d10:	f383 8811 	msr	BASEPRI, r3
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	e7fe      	b.n	8003d1e <prvTaskExitError+0x26>
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d32:	bf00      	nop
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0fc      	beq.n	8003d34 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d3a:	bf00      	nop
 8003d3c:	3714      	adds	r7, #20
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000010 	.word	0x20000010
 8003d4c:	00000000 	.word	0x00000000

08003d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003d50:	4b07      	ldr	r3, [pc, #28]	; (8003d70 <pxCurrentTCBConst2>)
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	6808      	ldr	r0, [r1, #0]
 8003d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5a:	f380 8809 	msr	PSP, r0
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f380 8811 	msr	BASEPRI, r0
 8003d6a:	4770      	bx	lr
 8003d6c:	f3af 8000 	nop.w

08003d70 <pxCurrentTCBConst2>:
 8003d70:	20000284 	.word	0x20000284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop

08003d78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d78:	4808      	ldr	r0, [pc, #32]	; (8003d9c <prvPortStartFirstTask+0x24>)
 8003d7a:	6800      	ldr	r0, [r0, #0]
 8003d7c:	6800      	ldr	r0, [r0, #0]
 8003d7e:	f380 8808 	msr	MSP, r0
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f380 8814 	msr	CONTROL, r0
 8003d8a:	b662      	cpsie	i
 8003d8c:	b661      	cpsie	f
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	df00      	svc	0
 8003d98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d9a:	bf00      	nop
 8003d9c:	e000ed08 	.word	0xe000ed08

08003da0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003da6:	4b44      	ldr	r3, [pc, #272]	; (8003eb8 <xPortStartScheduler+0x118>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a44      	ldr	r2, [pc, #272]	; (8003ebc <xPortStartScheduler+0x11c>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d109      	bne.n	8003dc4 <xPortStartScheduler+0x24>
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	613b      	str	r3, [r7, #16]
 8003dc2:	e7fe      	b.n	8003dc2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003dc4:	4b3c      	ldr	r3, [pc, #240]	; (8003eb8 <xPortStartScheduler+0x118>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a3d      	ldr	r2, [pc, #244]	; (8003ec0 <xPortStartScheduler+0x120>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d109      	bne.n	8003de2 <xPortStartScheduler+0x42>
 8003dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e7fe      	b.n	8003de0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003de2:	4b38      	ldr	r3, [pc, #224]	; (8003ec4 <xPortStartScheduler+0x124>)
 8003de4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	22ff      	movs	r2, #255	; 0xff
 8003df2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	4b30      	ldr	r3, [pc, #192]	; (8003ec8 <xPortStartScheduler+0x128>)
 8003e08:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e0a:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <xPortStartScheduler+0x12c>)
 8003e0c:	2207      	movs	r2, #7
 8003e0e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e10:	e009      	b.n	8003e26 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003e12:	4b2e      	ldr	r3, [pc, #184]	; (8003ecc <xPortStartScheduler+0x12c>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	4a2c      	ldr	r2, [pc, #176]	; (8003ecc <xPortStartScheduler+0x12c>)
 8003e1a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e1c:	78fb      	ldrb	r3, [r7, #3]
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e26:	78fb      	ldrb	r3, [r7, #3]
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2e:	2b80      	cmp	r3, #128	; 0x80
 8003e30:	d0ef      	beq.n	8003e12 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e32:	4b26      	ldr	r3, [pc, #152]	; (8003ecc <xPortStartScheduler+0x12c>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f1c3 0307 	rsb	r3, r3, #7
 8003e3a:	2b04      	cmp	r3, #4
 8003e3c:	d009      	beq.n	8003e52 <xPortStartScheduler+0xb2>
 8003e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e42:	f383 8811 	msr	BASEPRI, r3
 8003e46:	f3bf 8f6f 	isb	sy
 8003e4a:	f3bf 8f4f 	dsb	sy
 8003e4e:	60bb      	str	r3, [r7, #8]
 8003e50:	e7fe      	b.n	8003e50 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e52:	4b1e      	ldr	r3, [pc, #120]	; (8003ecc <xPortStartScheduler+0x12c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	4a1c      	ldr	r2, [pc, #112]	; (8003ecc <xPortStartScheduler+0x12c>)
 8003e5a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <xPortStartScheduler+0x12c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e64:	4a19      	ldr	r2, [pc, #100]	; (8003ecc <xPortStartScheduler+0x12c>)
 8003e66:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e70:	4b17      	ldr	r3, [pc, #92]	; (8003ed0 <xPortStartScheduler+0x130>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a16      	ldr	r2, [pc, #88]	; (8003ed0 <xPortStartScheduler+0x130>)
 8003e76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e7a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <xPortStartScheduler+0x130>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a13      	ldr	r2, [pc, #76]	; (8003ed0 <xPortStartScheduler+0x130>)
 8003e82:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e86:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e88:	f000 f8d6 	bl	8004038 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <xPortStartScheduler+0x134>)
 8003e8e:	2200      	movs	r2, #0
 8003e90:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e92:	f000 f8f5 	bl	8004080 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <xPortStartScheduler+0x138>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a0f      	ldr	r2, [pc, #60]	; (8003ed8 <xPortStartScheduler+0x138>)
 8003e9c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003ea0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003ea2:	f7ff ff69 	bl	8003d78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003ea6:	f7ff fbdb 	bl	8003660 <vTaskSwitchContext>
	prvTaskExitError();
 8003eaa:	f7ff ff25 	bl	8003cf8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	e000ed00 	.word	0xe000ed00
 8003ebc:	410fc271 	.word	0x410fc271
 8003ec0:	410fc270 	.word	0x410fc270
 8003ec4:	e000e400 	.word	0xe000e400
 8003ec8:	200003b0 	.word	0x200003b0
 8003ecc:	200003b4 	.word	0x200003b4
 8003ed0:	e000ed20 	.word	0xe000ed20
 8003ed4:	20000010 	.word	0x20000010
 8003ed8:	e000ef34 	.word	0xe000ef34

08003edc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003ef4:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <vPortEnterCritical+0x54>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	4a0d      	ldr	r2, [pc, #52]	; (8003f30 <vPortEnterCritical+0x54>)
 8003efc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003efe:	4b0c      	ldr	r3, [pc, #48]	; (8003f30 <vPortEnterCritical+0x54>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d10e      	bne.n	8003f24 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f06:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <vPortEnterCritical+0x58>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d009      	beq.n	8003f24 <vPortEnterCritical+0x48>
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	e7fe      	b.n	8003f22 <vPortEnterCritical+0x46>
	}
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	20000010 	.word	0x20000010
 8003f34:	e000ed04 	.word	0xe000ed04

08003f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b083      	sub	sp, #12
 8003f3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003f3e:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <vPortExitCritical+0x4c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d109      	bne.n	8003f5a <vPortExitCritical+0x22>
 8003f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	607b      	str	r3, [r7, #4]
 8003f58:	e7fe      	b.n	8003f58 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003f5a:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <vPortExitCritical+0x4c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <vPortExitCritical+0x4c>)
 8003f62:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f64:	4b07      	ldr	r3, [pc, #28]	; (8003f84 <vPortExitCritical+0x4c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d104      	bne.n	8003f76 <vPortExitCritical+0x3e>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	20000010 	.word	0x20000010
	...

08003f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f90:	f3ef 8009 	mrs	r0, PSP
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <pxCurrentTCBConst>)
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	f01e 0f10 	tst.w	lr, #16
 8003fa0:	bf08      	it	eq
 8003fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003faa:	6010      	str	r0, [r2, #0]
 8003fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003fb4:	f380 8811 	msr	BASEPRI, r0
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f7ff fb4e 	bl	8003660 <vTaskSwitchContext>
 8003fc4:	f04f 0000 	mov.w	r0, #0
 8003fc8:	f380 8811 	msr	BASEPRI, r0
 8003fcc:	bc09      	pop	{r0, r3}
 8003fce:	6819      	ldr	r1, [r3, #0]
 8003fd0:	6808      	ldr	r0, [r1, #0]
 8003fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd6:	f01e 0f10 	tst.w	lr, #16
 8003fda:	bf08      	it	eq
 8003fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fe0:	f380 8809 	msr	PSP, r0
 8003fe4:	f3bf 8f6f 	isb	sy
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	f3af 8000 	nop.w

08003ff0 <pxCurrentTCBConst>:
 8003ff0:	20000284 	.word	0x20000284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop

08003ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8003ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004002:	f383 8811 	msr	BASEPRI, r3
 8004006:	f3bf 8f6f 	isb	sy
 800400a:	f3bf 8f4f 	dsb	sy
 800400e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004010:	f7ff fa6e 	bl	80034f0 <xTaskIncrementTick>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800401a:	4b06      	ldr	r3, [pc, #24]	; (8004034 <SysTick_Handler+0x3c>)
 800401c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004020:	601a      	str	r2, [r3, #0]
 8004022:	2300      	movs	r3, #0
 8004024:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	e000ed04 	.word	0xe000ed04

08004038 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800403c:	4b0b      	ldr	r3, [pc, #44]	; (800406c <vPortSetupTimerInterrupt+0x34>)
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004042:	4b0b      	ldr	r3, [pc, #44]	; (8004070 <vPortSetupTimerInterrupt+0x38>)
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004048:	4b0a      	ldr	r3, [pc, #40]	; (8004074 <vPortSetupTimerInterrupt+0x3c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a0a      	ldr	r2, [pc, #40]	; (8004078 <vPortSetupTimerInterrupt+0x40>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	4a09      	ldr	r2, [pc, #36]	; (800407c <vPortSetupTimerInterrupt+0x44>)
 8004056:	3b01      	subs	r3, #1
 8004058:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800405a:	4b04      	ldr	r3, [pc, #16]	; (800406c <vPortSetupTimerInterrupt+0x34>)
 800405c:	2207      	movs	r2, #7
 800405e:	601a      	str	r2, [r3, #0]
}
 8004060:	bf00      	nop
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	e000e010 	.word	0xe000e010
 8004070:	e000e018 	.word	0xe000e018
 8004074:	20000004 	.word	0x20000004
 8004078:	10624dd3 	.word	0x10624dd3
 800407c:	e000e014 	.word	0xe000e014

08004080 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004080:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004090 <vPortEnableVFP+0x10>
 8004084:	6801      	ldr	r1, [r0, #0]
 8004086:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800408a:	6001      	str	r1, [r0, #0]
 800408c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800408e:	bf00      	nop
 8004090:	e000ed88 	.word	0xe000ed88

08004094 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800409a:	f3ef 8305 	mrs	r3, IPSR
 800409e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b0f      	cmp	r3, #15
 80040a4:	d913      	bls.n	80040ce <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <vPortValidateInterruptPriority+0x6c>)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	781b      	ldrb	r3, [r3, #0]
 80040ae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80040b0:	4b14      	ldr	r3, [pc, #80]	; (8004104 <vPortValidateInterruptPriority+0x70>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	7afa      	ldrb	r2, [r7, #11]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d209      	bcs.n	80040ce <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80040ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	607b      	str	r3, [r7, #4]
 80040cc:	e7fe      	b.n	80040cc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80040ce:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <vPortValidateInterruptPriority+0x74>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <vPortValidateInterruptPriority+0x78>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d909      	bls.n	80040f2 <vPortValidateInterruptPriority+0x5e>
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	e7fe      	b.n	80040f0 <vPortValidateInterruptPriority+0x5c>
	}
 80040f2:	bf00      	nop
 80040f4:	3714      	adds	r7, #20
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	e000e3f0 	.word	0xe000e3f0
 8004104:	200003b0 	.word	0x200003b0
 8004108:	e000ed0c 	.word	0xe000ed0c
 800410c:	200003b4 	.word	0x200003b4

08004110 <__libc_init_array>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	4e0d      	ldr	r6, [pc, #52]	; (8004148 <__libc_init_array+0x38>)
 8004114:	4c0d      	ldr	r4, [pc, #52]	; (800414c <__libc_init_array+0x3c>)
 8004116:	1ba4      	subs	r4, r4, r6
 8004118:	10a4      	asrs	r4, r4, #2
 800411a:	2500      	movs	r5, #0
 800411c:	42a5      	cmp	r5, r4
 800411e:	d109      	bne.n	8004134 <__libc_init_array+0x24>
 8004120:	4e0b      	ldr	r6, [pc, #44]	; (8004150 <__libc_init_array+0x40>)
 8004122:	4c0c      	ldr	r4, [pc, #48]	; (8004154 <__libc_init_array+0x44>)
 8004124:	f000 f82c 	bl	8004180 <_init>
 8004128:	1ba4      	subs	r4, r4, r6
 800412a:	10a4      	asrs	r4, r4, #2
 800412c:	2500      	movs	r5, #0
 800412e:	42a5      	cmp	r5, r4
 8004130:	d105      	bne.n	800413e <__libc_init_array+0x2e>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004138:	4798      	blx	r3
 800413a:	3501      	adds	r5, #1
 800413c:	e7ee      	b.n	800411c <__libc_init_array+0xc>
 800413e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004142:	4798      	blx	r3
 8004144:	3501      	adds	r5, #1
 8004146:	e7f2      	b.n	800412e <__libc_init_array+0x1e>
 8004148:	08004210 	.word	0x08004210
 800414c:	08004210 	.word	0x08004210
 8004150:	08004210 	.word	0x08004210
 8004154:	08004214 	.word	0x08004214

08004158 <memcpy>:
 8004158:	b510      	push	{r4, lr}
 800415a:	1e43      	subs	r3, r0, #1
 800415c:	440a      	add	r2, r1
 800415e:	4291      	cmp	r1, r2
 8004160:	d100      	bne.n	8004164 <memcpy+0xc>
 8004162:	bd10      	pop	{r4, pc}
 8004164:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004168:	f803 4f01 	strb.w	r4, [r3, #1]!
 800416c:	e7f7      	b.n	800415e <memcpy+0x6>

0800416e <memset>:
 800416e:	4402      	add	r2, r0
 8004170:	4603      	mov	r3, r0
 8004172:	4293      	cmp	r3, r2
 8004174:	d100      	bne.n	8004178 <memset+0xa>
 8004176:	4770      	bx	lr
 8004178:	f803 1b01 	strb.w	r1, [r3], #1
 800417c:	e7f9      	b.n	8004172 <memset+0x4>
	...

08004180 <_init>:
 8004180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004182:	bf00      	nop
 8004184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004186:	bc08      	pop	{r3}
 8004188:	469e      	mov	lr, r3
 800418a:	4770      	bx	lr

0800418c <_fini>:
 800418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800418e:	bf00      	nop
 8004190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004192:	bc08      	pop	{r3}
 8004194:	469e      	mov	lr, r3
 8004196:	4770      	bx	lr
